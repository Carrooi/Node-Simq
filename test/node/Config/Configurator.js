// Generated by CoffeeScript 1.6.3
(function() {
  var Configurator, dir, expect, getConfig, path;

  expect = require('chai').expect;

  path = require('path');

  Configurator = require('../../../lib/Config/Configurator');

  dir = path.resolve(__dirname + '/../../data/package/config');

  getConfig = function(name) {
    return (new Configurator(dir + '/' + name + '.json')).load();
  };

  describe('Configurator', function() {
    return describe('#load()', function() {
      it('should load empty configuration', function() {
        var config;
        config = getConfig('empty');
        expect(config).to.include.keys(['packages', 'template', 'cache', 'debugger', 'server', 'routes']);
        expect(config.packages).to.include.keys(['application']);
        return expect(config.packages.application).to.be.eql({
          skip: false,
          target: null,
          paths: {
            "package": './package.json',
            npmModules: './node_modules'
          },
          base: null,
          style: null,
          modules: [],
          autoNpmModules: true,
          aliases: {},
          run: []
        });
      });
      it('should throw an error when there is fsModules section', function() {
        return expect(function() {
          return getConfig('fs-modules');
        }).to["throw"](Error, 'Config: fsModules section is deprecated. Please take a look in new documentation.');
      });
      it('should throw an error when there is coreModules section', function() {
        return expect(function() {
          return getConfig('core-modules');
        }).to["throw"](Error, 'Config: coreModules section is deprecated. Please take a look in new documentation.');
      });
      it('should load configuration with includes', function() {
        var config;
        config = getConfig('advanced/config');
        return expect(config.packages.application.target).to.be.equal('./public/application.js');
      });
      it('should load configuration with styles', function() {
        var styles;
        styles = getConfig('styles/styles').packages.application.style;
        expect(styles["in"]).to.be.equal('./css/style.less');
        return expect(styles.out).to.be.equal('./public/style.css');
      });
      it('should not load styles from configuration because there is no in file', function() {
        var styles;
        styles = getConfig('styles/no-in').packages.application.style;
        return expect(styles).to.be["null"];
      });
      it('should not load styles from configuration because there is no out file', function() {
        var styles;
        styles = getConfig('styles/no-out').packages.application.style;
        return expect(styles).to.be["null"];
      });
      it('should load transformed libraries section into run section', function() {
        var config;
        config = getConfig('libraries');
        return expect(config.packages.application.run).to.be.eql(['- ./libs/begin/1.js', '- ./libs/begin/2.js', '- ./libs/end/1.js', '- ./libs/end/2.js']);
      });
      it('should load config with modules in run section', function() {
        var config;
        config = getConfig('run');
        return expect(config.packages.application.run).to.be.eql(['/app/Application', '/app/controllers/Menu.js']);
      });
      return it('should load config with modules in run section and with libraries', function() {
        var config;
        config = getConfig('run-and-libraries');
        return expect(config.packages.application.run).to.be.eql(['- ./libs/begin/1.js', '- ./libs/begin/2.js', '/app/Application', '/app/controllers/Menu.js', '- ./libs/end/1.js', '- ./libs/end/2.js']);
      });
    });
  });

}).call(this);
