// Generated by CoffeeScript 1.6.3
(function() {
  var Compiler, Loader, Style, dir, expect, fs, loader, path, result, section, style;

  expect = require('chai').expect;

  path = require('path');

  fs = require('fs');

  Loader = require('../../../lib/Loader');

  Style = require('../../../lib/Parser/Style');

  Compiler = require('source-compiler');

  dir = path.normalize(__dirname + '/../../data/package');

  section = {
    cached: {
      style: {
        "in": dir + '/css/style.less',
        out: dir + '/css/style.css',
        dependencies: [dir + '/css/common.less']
      }
    },
    loaded: {
      style: {
        "in": dir + '/css/style.less',
        out: dir + '/css/style.css',
        dependencies: null
      }
    }
  };

  result = {
    original: 'body {\n  color: #000000;\n}\n',
    updated: 'body {\n  color: #ffffff;\n}\n'
  };

  loader = new Loader;

  style = new Style(loader, section.loaded);

  describe('Style', function() {
    return describe('#parse()', function() {
      it('should return parsed less file', function(done) {
        return style.parse().then(function(data) {
          expect(data).to.be.equal(result.original);
          return done();
        }).done();
      });
      return describe('caching', function() {
        beforeEach(function() {
          Compiler.setCache(path.resolve(__dirname + '/../../data/cache'));
          return style.section = section.cached;
        });
        afterEach(function() {
          var file;
          Compiler.cache = null;
          style.section = section.loaded;
          fs.writeFileSync(dir + '/css/common.less', '@color: #000000;');
          file = path.resolve(__dirname + '/../../data/cache/__' + Compiler.CACHE_NAMESPACE + '.json');
          if (fs.existsSync(file)) {
            return fs.unlinkSync(file);
          }
        });
        it('should load parsed less file from cache', function(done) {
          return style.parse().then(function(data) {
            expect(Compiler.cache.load(section.cached.style["in"])).to.be.equal(result.original);
            return done();
          }).done();
        });
        it('should not load less file from cache', function(done) {
          style.section = section.loaded;
          return style.parse().then(function(data) {
            expect(Compiler.cache.load(section.cached.style["in"])).to.be["null"];
            return done();
          }).done();
        });
        return it('should invalidate compiled less file after changes in dependent file', function(done) {
          fs.writeFileSync(dir + '/css/common.less', '@color: #ffffff;');
          return style.parse().then(function(data) {
            expect(Compiler.cache.load(section.cached.style["in"])).to.be.equal(result.updated);
            return done();
          }).done();
        });
      });
    });
  });

}).call(this);
