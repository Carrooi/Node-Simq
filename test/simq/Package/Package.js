// Generated by CoffeeScript 1.6.3
(function() {
  var Info, Package, dir, expect, path, pckg;

  expect = require('chai').expect;

  path = require('path');

  Info = require('module-info');

  Package = require('../../../lib/Package/Package');

  dir = path.resolve(__dirname + '/../../data/package');

  pckg = null;

  describe('_Package', function() {
    beforeEach(function() {
      return pckg = new Package(dir);
    });
    describe('#setApplication()', function() {
      return it('should set path for result js file', function() {
        pckg.setApplication('./public/application.js');
        return expect(pckg.application).to.be.equal(dir + '/public/application.js');
      });
    });
    describe('#setStyle()', function() {
      it('should set paths for styles without dependent files', function() {
        pckg.setStyle('./css/style.less', './public/style.css');
        expect(pckg.style["in"]).to.be.equal(dir + '/css/style.less');
        expect(pckg.style.out).to.be.equal(dir + '/public/style.css');
        return expect(pckg.style.dependencies).to.be["null"];
      });
      return it('should set paths for styles with dependent files', function() {
        pckg.setStyle('./css/style.less', './public/style.css', ['./css/*.less']);
        return expect(pckg.style.dependencies).to.be.eql([dir + '/css/common.less', dir + '/css/style.less', dir + '/css/variables.less']);
      });
    });
    describe('#addModule()', function() {
      it('should add module with absolute path', function() {
        pckg.addModule(dir + '/modules/1.js');
        expect(pckg.modules).to.include.keys('package/modules/1.js');
        return expect(pckg.modules['package/modules/1.js']).to.be.equal(dir + '/modules/1.js');
      });
      it('should add modules with absolute path', function() {
        pckg.addModule(dir + '/modules/*.js<$>');
        return expect(pckg.modules).to.include.keys(['package/modules/1.js', 'package/modules/2.js', 'package/modules/3.js', 'package/modules/4.js', 'package/modules/6.js']);
      });
      it('should add core module', function() {
        pckg.addModule('events');
        return expect(pckg.modules).to.include.keys('events');
      });
      it('should add module from base directory', function() {
        pckg.addModule('./modules/1.js');
        expect(pckg.modules).to.include.keys('modules/1.js');
        return expect(pckg.modules['modules/1.js']).to.be.equal(dir + '/modules/1.js');
      });
      it('should add modules from base directory', function() {
        pckg.addModule('./modules/*.js<$>');
        return expect(pckg.modules).to.include.keys(['modules/1.js', 'modules/2.js', 'modules/3.js', 'modules/4.js', 'modules/6.js']);
      });
      it('should add installed npm module', function() {
        pckg.addModule('module/test.js');
        expect(pckg.modules).to.include.keys('module/test.js');
        return expect(pckg.modules['module/test.js']).to.be.equal(dir + '/node_modules/module/test.js');
      });
      return it('should add installed npm modules', function() {
        pckg.addModule('module/*.js<$>');
        return expect(pckg.modules).to.include.keys(['module', 'module/test.js', 'module/test2.js']);
      });
    });
    describe('#addAlias()', function() {
      it('should throw an error if module is not registered', function() {
        return expect(function() {
          return pckg.addAlias('unknown', 'new');
        }).to["throw"](Error);
      });
      it('should create new module for alias', function() {
        pckg.addModule('module/test.js');
        pckg.addAlias('module/test.js', 'test');
        expect(pckg.modules).to.include.keys(['module/test.js', 'test']);
        return expect(pckg.modules.test).to.be.equal("`module.exports = require('module/test.js');`");
      });
      it('should create new module for alias without extension', function() {
        pckg.addModule('module/test.js');
        pckg.addAlias('module/test', 'test');
        return expect(pckg.modules).to.include.keys(['module/test.js', 'test']);
      });
      return it('should create new module for alias without exact file path', function() {
        pckg.addModule('module/any/index.json');
        pckg.addAlias('module/any', 'any');
        return expect(pckg.modules).to.include.keys(['module/any/index.json', 'any']);
      });
    });
    describe('#resolveRegisteredModule()', function() {
      it('should return same name', function() {
        pckg.addModule('module/test.js');
        return expect(pckg.resolveRegisteredModule('module/test.js')).to.be.equal('module/test.js');
      });
      it('should return full name from name without extension', function() {
        pckg.addModule('module/test.js');
        return expect(pckg.resolveRegisteredModule('module/test')).to.be.equal('module/test.js');
      });
      it('should return full name from directory', function() {
        pckg.addModule('module/any/index.json');
        return expect(pckg.resolveRegisteredModule('module/any')).to.be.equal('module/any/index.json');
      });
      return it('should return null if module is not registered', function() {
        return expect(pckg.findRegisteredModule('unknown')).to.be["null"];
      });
    });
    return describe('#findRegisteredModule()', function() {
      it('should find registered module', function() {
        pckg.addModule('module/test.js');
        return expect(pckg.findRegisteredModule('module/test.js')).to.be.equal(dir + '/node_modules/module/test.js');
      });
      it('should find registered module without extension', function() {
        pckg.addModule('module/test.js');
        return expect(pckg.findRegisteredModule('module/test')).to.be.equal(dir + '/node_modules/module/test.js');
      });
      it('should find registered module withoud file path', function() {
        pckg.addModule('module/any/index.json');
        return expect(pckg.findRegisteredModule('module/any')).to.be.equal(dir + '/node_modules/module/any/index.json');
      });
      return it('should return null if module is not registered', function() {
        return expect(pckg.findRegisteredModule('unknown')).to.be["null"];
      });
    });
  });

}).call(this);
