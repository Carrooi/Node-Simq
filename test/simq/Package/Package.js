// Generated by CoffeeScript 1.6.3
(function() {
  var Info, Package, dir, expect, path, pckg;

  expect = require('chai').expect;

  path = require('path');

  Info = require('module-info');

  Package = require('../../../lib/Package/Package');

  dir = path.resolve(__dirname + '/../../data/package');

  pckg = null;

  describe('_Package', function() {
    beforeEach(function() {
      return pckg = new Package(dir);
    });
    describe('#setApplication()', function() {
      return it('should set path for result js file', function() {
        pckg.setApplication('./public/application.js');
        return expect(pckg.application).to.be.equal(dir + '/public/application.js');
      });
    });
    describe('#setStyle()', function() {
      it('should set paths for styles without dependent files', function() {
        pckg.setStyle('./css/style.less', './public/style.css');
        expect(pckg.style["in"]).to.be.equal(dir + '/css/style.less');
        expect(pckg.style.out).to.be.equal(dir + '/public/style.css');
        return expect(pckg.style.dependencies).to.be["null"];
      });
      return it('should set paths for styles with dependent files', function() {
        pckg.setStyle('./css/style.less', './public/style.css', ['./css/*.less']);
        return expect(pckg.style.dependencies).to.be.eql([dir + '/css/common.less', dir + '/css/style.less', dir + '/css/variables.less']);
      });
    });
    describe('#addModule()', function() {
      it('should add new module and create instance of module-info', function() {
        pckg.addModule('module');
        return expect(pckg.modules.module).to.be.an["instanceof"](Info);
      });
      return it('should throw an error if module was not found', function() {
        return expect(function() {
          return pckg.addModule('unknown');
        }).to["throw"](Error);
      });
    });
    describe('#addCoreModule()', function() {
      it('should add events core module', function() {
        pckg.addCoreModule('events');
        return expect(pckg.coreModules).to.include.keys('events');
      });
      return it('should throw an error if core module is not supported', function() {
        return expect(function() {
          return pckg.addCoreModule('fs');
        }).to["throw"](Error);
      });
    });
    return describe('#addFsModule()', function() {
      it('should add new module from disk', function() {
        pckg.addFsModule(dir + '/node_modules/module');
        return expect(pckg.fsModules).to.include.keys(dir + '/node_modules/module');
      });
      it('should throw an error if path does not exists', function() {
        return expect(function() {
          return pckg.addFsModule(dir + '/unknown');
        }).to["throw"](Error);
      });
      it('should throw an error if path is not directory', function() {
        return expect(function() {
          return pckg.addFsModule(dir + '/node_modules/module/index.js');
        }).to["throw"](Error);
      });
      return it('should throw an error if package.json does not exists in directory', function() {
        return expect(function() {
          return pckg.addFsModule(dir + '/libs');
        }).to["throw"](Error);
      });
    });
  });

}).call(this);
