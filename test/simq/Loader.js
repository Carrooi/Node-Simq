// Generated by CoffeeScript 1.6.3
(function() {
  var Compiler, Loader, Package, dir, expect, files, fs, loader, path, pckg;

  expect = require('chai').expect;

  Compiler = require('source-compiler');

  fs = require('fs');

  path = require('path');

  Loader = require('../../lib/Loader');

  Package = require('../../lib/Package');

  dir = path.normalize(__dirname + '/../data');

  pckg = new Package;

  loader = new Loader(pckg);

  files = {
    json: {
      file: dir + '/package/modules/5.json',
      name: 'data/package/modules/5.json',
      result: "'data/package/modules/5.json': function(exports, __require, module) {\n" + pckg.getGlobalsForModule('data/package/modules/5.json').join('\n') + "\nmodule.exports = (function() {\nreturn {\n\t\"message\": \"linux\"\n}\n}).call(this);\n\n}"
    },
    less: {
      file: dir + '/package/css/style.less',
      result: 'body {\n  color: #000000;\n}\n'
    }
  };

  describe('Loader', function() {
    describe('#loadModule()', function() {
      it('should return error if file type can not be loaded as module', function(done) {
        return loader.loadModule(dir + '/package/css/style.less').fail(function(err) {
          expect(err).to.be.an["instanceof"](Error);
          return done();
        }).done();
      });
      it('should return error if file is in remote server', function(done) {
        return loader.loadModule('http://www.my-site.com/file.js').fail(function(err) {
          expect(err).to.be.an["instanceof"](Error);
          return done();
        }).done();
      });
      return it('should load json module', function(done) {
        return loader.loadModule(files.json.file).then(function(data) {
          expect(data).to.be.equal(files.json.result);
          return done();
        }).done();
      });
    });
    describe('#loadModules()', function() {
      return it('should return parsed list of loaded modules', function(done) {
        return loader.loadModules([dir + '/package/modules/1.js']).then(function(data) {
          var content, globals;
          globals = pckg.getGlobalsForModule('data/package/modules/1.js').join('\n');
          content = "'data/package/modules/1.js': function(exports, __require, module) {\n" + globals + "\nrequire('./2');\n}";
          expect(data).to.be.eql([content]);
          return done();
        }).done();
      });
    });
    return describe('caching', function() {
      beforeEach(function() {
        return Compiler.setCache(dir + '/cache');
      });
      afterEach(function() {
        Compiler.cache = null;
        if (fs.existsSync(dir + '/cache/__' + Compiler.CACHE_NAMESPACE + '.json')) {
          return fs.unlinkSync(dir + '/cache/__' + Compiler.CACHE_NAMESPACE + '.json');
        }
      });
      it('should load json module from cache', function(done) {
        return loader.loadModule(files.json.file).then(function(data) {
          expect(Compiler.cache.load(files.json.file)).to.be.equal('(function() {\nreturn {\n\t"message": "linux"\n}\n}).call(this);\n');
          return done();
        }).done();
      });
      it('should not save less file to cache', function(done) {
        return loader.loadFile(files.less.file).then(function(data) {
          expect(Compiler.cache.load(files.less.file)).to.be["null"];
          return done();
        }).done();
      });
      return it('should save less file to cache', function(done) {
        return loader.loadFile(files.less.file, []).then(function(data) {
          expect(Compiler.cache.load(files.less.file)).to.be.equal(files.less.result);
          return done();
        }).done();
      });
    });
  });

}).call(this);
