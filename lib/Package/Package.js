// Generated by CoffeeScript 1.6.3
(function() {
  var Finder, Helpers, Info, Package, fs, path;

  Info = require('module-info');

  fs = require('fs');

  path = require('path');

  Finder = require('fs-finder');

  Helpers = require('../Helpers');

  Package = (function() {
    Package.prototype.basePath = null;

    Package.prototype.skip = false;

    Package.prototype.application = null;

    Package.prototype.base = null;

    Package.prototype.style = null;

    Package.prototype.modules = null;

    Package.prototype.aliases = null;

    Package.prototype.run = null;

    Package.prototype.libraries = null;

    function Package(basePath) {
      this.basePath = basePath;
      this.basePath = path.resolve(this.basePath);
      this.modules = {};
      this.aliases = {};
      this.run = [];
      this.libraries = {
        begin: [],
        end: []
      };
    }

    Package.prototype.getBasePath = function() {
      return this.basePath + (this.base === null ? '' : '/' + this.base);
    };

    Package.prototype.setApplication = function(application) {
      this.application = application;
      this.application = Helpers.resolvePath(this.basePath, this.application, this.base);
      return this;
    };

    Package.prototype.setStyle = function(fileIn, fileOut, dependencies) {
      if (dependencies == null) {
        dependencies = null;
      }
      fileIn = Helpers.resolvePath(this.basePath, fileIn, this.base);
      fileOut = Helpers.resolvePath(this.basePath, fileOut, this.base);
      if (dependencies !== null) {
        dependencies = Helpers.expandFilesList(dependencies, this.basePath, this.base);
      }
      this.style = {
        "in": fileIn,
        out: fileOut,
        dependencies: dependencies
      };
      return this;
    };

    Package.prototype.addModule = function(name) {
      var found, paths, pckg, _i, _j, _k, _len, _len1, _len2, _path;
      found = false;
      if (name[0] === '/') {
        if (fs.existsSync(name)) {
          found = true;
          if (fs.statSync(name).isDirectory()) {
            pckg = new Info(name);
            this.modules[pckg.getName()] = pckg.getMainFile();
            this.modules[pckg.getName() + '/package.json'] = pckg.getPackagePath();
          } else {
            pckg = Info.fromFile(name);
            this.modules[pckg.getModuleName(name)] = name;
          }
        } else {
          paths = Finder.findFiles(name);
          if (paths.length > 0) {
            found = true;
            for (_i = 0, _len = paths.length; _i < _len; _i++) {
              _path = paths[_i];
              this.addModule(_path);
            }
          }
        }
      }
      if (found === false) {
        _path = Helpers.getCoreModulePath(name);
        if (_path !== null) {
          found = true;
          this.modules[name] = _path;
        }
      }
      if (name[0] === '.' && found === false) {
        _path = Helpers.resolvePath(this.basePath, name, this.base);
        if (fs.existsSync(_path)) {
          found = true;
          pckg = Info.fromFile(_path);
          name = pckg.getModuleName(name).replace(new RegExp('^' + pckg.getName() + '\/'), '');
          this.modules[name] = _path;
        } else {
          paths = Finder.findFiles(_path);
          if (paths.length > 0) {
            found = true;
            for (_j = 0, _len1 = paths.length; _j < _len1; _j++) {
              _path = paths[_j];
              _path = path.relative(this.getBasePath(), _path);
              this.addModule('./' + _path);
            }
          }
        }
      }
      if (found === false) {
        _path = Helpers.resolvePath(this.basePath, './node_modules/' + name, this.base);
        if (fs.existsSync(_path)) {
          found = true;
          pckg = Info.fromFile(_path);
          this.modules[pckg.getModuleName(_path)] = _path;
        } else {
          paths = Finder.findFiles(_path);
          if (paths.length > 0) {
            found = true;
            for (_k = 0, _len2 = paths.length; _k < _len2; _k++) {
              _path = paths[_k];
              _path = path.relative(this.getBasePath() + '/node_modules', _path);
              this.addModule(_path);
            }
          }
        }
      }
      if (found === false) {
        throw new Error('Module ' + name + ' was not found.');
      }
      return this;
    };

    Package.prototype.addAlias = function(original, alias) {
      this.aliases[alias] = original;
      return this;
    };

    Package.prototype.addToAutorun = function(name) {
      this.run.push(name);
      return this;
    };

    Package.prototype.addLibraryToBegin = function(_path) {
      this.libraries.begin.push(Helpers.expandFilesList(_path));
      return this;
    };

    Package.prototype.addLibraryToEnd = function(_path) {
      this.libraries.end.push(Helpers.expandFilesList(_path));
      return this;
    };

    return Package;

  })();

  module.exports = Package;

}).call(this);
