// Generated by CoffeeScript 1.6.3
(function() {
  var Finder, Helpers, Info, Package, fs, path;

  Info = require('module-info');

  fs = require('fs');

  path = require('path');

  Finder = require('fs-finder');

  Helpers = require('../Helpers');

  Package = (function() {
    Package.SUPPORTED = ['js', 'json', 'ts', 'coffee'];

    Package.ALIAS_REGEXP = '^\\<([a-zA-Z0-9/-]+)\\|([a-zA-Z0-9/-]+)\\>$';

    Package.prototype.basePath = null;

    Package.prototype.name = '';

    Package.prototype.skip = false;

    Package.prototype.target = null;

    Package.prototype.paths = null;

    Package.prototype.base = null;

    Package.prototype.style = null;

    Package.prototype.modules = null;

    Package.prototype.autoNpmModules = true;

    Package.prototype.aliases = null;

    Package.prototype.run = null;

    Package.prototype.info = null;

    Package.prototype.initialized = false;

    Package.prototype.logger = null;

    function Package(basePath) {
      this.basePath = basePath;
      this.basePath = path.resolve(this.basePath);
      this.paths = {
        "package": './package.json',
        npmModules: './node_modules'
      };
      this.modules = [];
      this.aliases = {};
      this.run = [];
    }

    Package.prototype.log = function(message) {
      if (this.logger !== null) {
        return this.logger.log(message);
      }
      return message;
    };

    Package.prototype.prepare = function() {
      var dependencies, main, name, pckg, _path;
      if (this.initialized === false) {
        this.addModule(this.getPackageInfo().getPackagePath());
        main = this.getPackageInfo().getMainFile();
        if (main !== null) {
          this.log("Adding " + main + " module");
          this.addModule(main);
        }
        dependencies = this.getPackageInfo().getData().dependencies;
        if (typeof dependencies === 'object' && this.autoNpmModules) {
          this.log("Adding npm dependencies");
          if (!fs.existsSync(this.getPath(this.paths.npmModules))) {
            throw new Error("Npm modules not found. Did you run 'npm install .' command?");
          }
          for (name in dependencies) {
            _path = this.getPath(this.paths.npmModules + '/' + name);
            if (!fs.existsSync(_path)) {
              throw new Error("Npm module '" + name + "' not found. Did you run 'npm install .' command?");
            }
            pckg = new Info(_path);
            name = pckg.getPackagePath();
            this.log("Adding " + name + " module");
            this.addModule(name);
            main = pckg.getMainFile();
            if (main !== null) {
              this.log("Adding " + main + " module");
              this.addModule(main);
            }
          }
        }
        return this.initialized = true;
      }
    };

    Package.prototype.getBasePath = function() {
      return this.basePath + (this.base === null ? '' : '/' + this.base);
    };

    Package.prototype.getPath = function(_path) {
      return path.resolve(this.getBasePath() + '/' + _path);
    };

    Package.prototype.getPackageInfo = function() {
      if (this.info === null) {
        this.info = new Info(path.dirname(this.getPath(this.paths["package"])));
      }
      return this.info;
    };

    Package.prototype.expandPaths = function(paths) {
      var result, _i, _len, _path;
      result = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        _path = paths[_i];
        if (_path.match(/^http/) === null) {
          _path = this.getPath(_path);
          if (fs.existsSync(_path) && fs.statSync(_path).isFile()) {
            result.push(_path);
          } else {
            result = result.concat(Finder.findFiles(_path));
          }
        } else {
          result.push(_path);
        }
      }
      return result.filter(function(el, pos) {
        return result.indexOf(el) === pos;
      });
    };

    Package.prototype.setTarget = function(target) {
      this.target = target;
      this.target = this.getPath(this.target);
      return this;
    };

    Package.prototype.setStyle = function(fileIn, fileOut, dependencies) {
      if (dependencies == null) {
        dependencies = null;
      }
      fileIn = this.getPath(fileIn);
      fileOut = this.getPath(fileOut);
      if (!fs.existsSync(fileIn)) {
        throw new Error('File ' + fileIn + ' does not exists.');
      }
      if (dependencies !== null) {
        dependencies = this.expandPaths(dependencies);
      }
      this.style = {
        "in": fileIn,
        out: fileOut,
        dependencies: dependencies
      };
      return this;
    };

    Package.prototype.addModule = function(name) {
      var found, main, paths, pckg, _i, _j, _k, _l, _len, _len1, _len2, _len3, _path;
      found = false;
      if (name[0] === '/') {
        if (fs.existsSync(name)) {
          found = true;
          if (fs.statSync(name).isDirectory()) {
            pckg = new Info(name);
            main = pckg.getMainFile();
            if (main !== null) {
              this.modules.push(main);
            }
            this.modules.push(pckg.getPackagePath());
          } else {
            this.modules.push(name);
          }
        } else {
          paths = Finder.findFiles(name);
          if (paths.length > 0) {
            found = true;
            for (_i = 0, _len = paths.length; _i < _len; _i++) {
              _path = paths[_i];
              this.addModule(_path);
            }
          }
        }
      }
      if (found === false) {
        _path = Helpers.getCoreModulePath(name);
        if (_path !== null) {
          found = true;
          this.modules.push(_path);
        } else if (require('../../data.json').supportedCores.indexOf(name) !== -1) {
          throw new Error("Core module " + name + " was not found.");
        }
      }
      if (name[0] === '.' && found === false) {
        _path = this.getPath(name);
        if (fs.existsSync(_path)) {
          found = true;
          this.modules.push(_path);
        } else {
          paths = Finder.findFiles(_path);
          found = true;
          for (_j = 0, _len1 = paths.length; _j < _len1; _j++) {
            _path = paths[_j];
            _path = path.relative(this.getBasePath(), _path);
            this.addModule('./' + _path);
          }
        }
      }
      if (found === false) {
        _path = this.getPath(this.paths.npmModules + '/' + name);
        if (fs.existsSync(_path)) {
          if (fs.statSync(_path).isFile()) {
            found = true;
            this.modules.push(_path);
          } else {
            paths = Finder.from(_path).findFiles('*.js');
            if (paths.length > 0) {
              found = true;
              for (_k = 0, _len2 = paths.length; _k < _len2; _k++) {
                _path = paths[_k];
                _path = path.relative(this.getPath(this.paths.npmModules), _path);
                this.addModule(_path);
              }
            }
          }
        } else {
          paths = Finder.findFiles(_path);
          if (paths.length > 0) {
            found = true;
            for (_l = 0, _len3 = paths.length; _l < _len3; _l++) {
              _path = paths[_l];
              _path = path.relative(this.getPath(this.paths.npmModules), _path);
              this.addModule(_path);
            }
          }
        }
      }
      if (found === false) {
        throw new Error('Module ' + name + ' was not found.');
      }
      return this;
    };

    Package.prototype.addAlias = function(original, alias) {
      this.aliases[alias] = original;
      return this;
    };

    Package.prototype.addToAutorun = function(name) {
      var file, files, _i, _len;
      if (name.match(/^\<.+\>$/) !== null) {
        throw new Error('Inline code in run section is not supported. Please, put that code into module.');
      }
      if (name.match(/^-\s/) === null) {
        this.run.push(name);
      } else {
        name = name.replace(/^-\s/, '');
        name = path.resolve(this.getBasePath(), name);
        if (fs.existsSync(name)) {
          this.run.push(name);
        } else {
          files = Finder.findFiles(name);
          if (files.length === 0) {
            throw new Error('Library to run ' + name + ' was not found.');
          }
          for (_i = 0, _len = files.length; _i < _len; _i++) {
            file = files[_i];
            this.addToAutorun(file);
          }
        }
      }
      return this;
    };

    return Package;

  })();

  module.exports = Package;

}).call(this);
