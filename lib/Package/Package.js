// Generated by CoffeeScript 1.6.3
(function() {
  var Helpers, Info, Package, fs, path;

  Info = require('module-info');

  fs = require('fs');

  path = require('path');

  Helpers = require('../Helpers');

  Package = (function() {
    Package.prototype.basePath = null;

    Package.prototype.skip = false;

    Package.prototype.application = null;

    Package.prototype.base = null;

    Package.prototype.style = null;

    Package.prototype.modules = null;

    Package.prototype.coreModules = null;

    Package.prototype.fsModules = null;

    Package.prototype.aliases = null;

    Package.prototype.run = null;

    Package.prototype.libraries = null;

    function Package(basePath) {
      this.basePath = basePath;
      this.basePath = path.resolve(this.basePath);
      this.modules = {};
      this.coreModules = {};
      this.fsModules = {};
      this.aliases = {};
      this.run = [];
      this.libraries = {
        begin: [],
        end: []
      };
    }

    Package.prototype.setApplication = function(application) {
      this.application = application;
      this.application = Helpers.resolvePath(this.basePath, this.application, this.base);
      return this;
    };

    Package.prototype.setStyle = function(fileIn, fileOut, dependencies) {
      if (dependencies == null) {
        dependencies = null;
      }
      fileIn = Helpers.resolvePath(this.basePath, fileIn, this.base);
      fileOut = Helpers.resolvePath(this.basePath, fileOut, this.base);
      if (dependencies !== null) {
        dependencies = Helpers.expandFilesList(dependencies, this.basePath, this.base);
      }
      this.style = {
        "in": fileIn,
        out: fileOut,
        dependencies: dependencies
      };
      return this;
    };

    Package.prototype.addModule = function(name) {
      var _path;
      _path = Helpers.resolvePath(this.basePath, './node_modules/' + name, this.base);
      if (!fs.existsSync(_path)) {
        throw new Error('Module ' + name + ' was not found.');
      }
      this.modules[name] = new Info(_path);
      return this;
    };

    Package.prototype.addCoreModule = function(name) {
      var _path;
      if (!Helpers.isCoreModuleSupported(name)) {
        throw new Error('Core module ' + name + ' is not supported.');
      }
      _path = Helpers.getCoreModulePath(name);
      if (_path === null) {
        throw new Error('Core module ' + name + ' was not found.');
      }
      this.coreModules[name] = _path;
      return this;
    };

    Package.prototype.addFsModule = function(_path, paths) {
      var pckg;
      if (paths == null) {
        paths = null;
      }
      if (!fs.existsSync(_path)) {
        throw new Error('Module ' + _path + ' does not exists.');
      }
      if (!fs.statSync(_path).isDirectory()) {
        throw new Error('Module ' + _path + ' is not directory.');
      }
      pckg = path.resolve(_path + '/package.json');
      if (!fs.existsSync(pckg) || !fs.statSync(pckg).isFile()) {
        throw new Error('File ' + pckg + ' was not found.');
      }
      paths = ['./<*.js$>'];
      paths = Helpers.expandFilesList(paths, _path);
      this.fsModules[_path] = paths;
      return this;
    };

    Package.prototype.addAlias = function(original, alias) {
      this.aliases[alias] = original;
      return this;
    };

    Package.prototype.addToAutorun = function(name) {
      this.run.push(name);
      return this;
    };

    Package.prototype.addLibraryToBegin = function(_path) {
      this.libraries.begin.push(Helpers.expandFilesList(_path));
      return this;
    };

    Package.prototype.addLibraryToEnd = function(_path) {
      this.libraries.end.push(Helpers.expandFilesList(_path));
      return this;
    };

    return Package;

  })();

  module.exports = Package;

}).call(this);
