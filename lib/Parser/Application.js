// Generated by CoffeeScript 1.6.3
(function() {
  var Application, Q, Uglify, _path;

  _path = require('path');

  Uglify = require('uglify-js');

  Q = require('q');

  Application = (function() {
    Application.prototype.simq = null;

    Application.prototype.loader = null;

    Application.prototype.basePath = null;

    function Application(simq, loader, basePath) {
      this.simq = simq;
      this.loader = loader;
      this.basePath = basePath;
    }

    Application.prototype.parse = function(section, minify) {
      var base, processLib,
        _this = this;
      if (minify == null) {
        minify = true;
      }
      base = this.basePath + '/' + (section.base ? section.base + '/' : '');
      processLib = function(result, libs, num, finish) {
        var file;
        if (libs.length === 0 || num === libs.length) {
          finish(result);
          return true;
        }
        file = libs[num].match(/^https?\:\/\//) === null ? base + libs[num] : libs[num];
        return _this.loader.loadFile(file).then(function(content) {
          result.push(content);
          return processLib(result, libs, num + 1, finish);
        });
      };
      return (function() {
        return Q.resolve([]);
      })().then(function(result) {
        var deferred;
        deferred = Q.defer();
        processLib(result, section.libs.begin, 0, function(result) {
          return deferred.resolve(result);
        });
        return deferred.promise;
      }).then(function(result) {
        var buf, deferred, ext, name, path, _i, _len, _ref;
        buf = [];
        _ref = section.modules;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          path = _ref[_i];
          if (section.base !== null) {
            path = './' + section.base + '/' + path;
          }
          ext = _path.extname(path);
          name = path.replace(new RegExp('\\*?' + ext + '$'), '');
          ext = ext === '' ? null : ext.substring(1);
          if (name.substring(name.length - 1) === '/') {
            buf = buf.concat(_this.loader.getModulesInDir(_this.basePath + '/' + name, ext));
          } else {
            buf.push(_this.basePath + '/' + path);
          }
        }
        deferred = Q.defer();
        _this.loader.loadModules(buf, section.base).then(function(modules) {
          return deferred.resolve({
            result: result,
            modules: modules
          });
        });
        return deferred.promise;
      }).then(function(data) {
        var alias, deferred, module, _ref;
        _ref = section.aliases;
        for (alias in _ref) {
          module = _ref[alias];
          data.modules.push('\'' + alias + '\': \'' + module + '\'');
        }
        deferred = Q.defer();
        _this.loader.loadFile(__dirname + '/../Module.js').then(function(content) {
          content = content.replace(/\s+$/, '').replace(/;$/, '');
          return deferred.resolve({
            module: content,
            result: data.result,
            modules: data.modules
          });
        });
        return deferred.promise;
      }).then(function(data) {
        data.result.push(data.module + '({' + data.modules.join(',\n') + '\n});');
        return Q.resolve(data.result);
      }).then(function(result) {
        var deferred;
        deferred = Q.defer();
        processLib(result, section.libs.end, 0, function(result) {
          return deferred.resolve(result);
        });
        return deferred.promise;
      }).then(function(result) {
        var module, run, _i, _len, _ref;
        run = [];
        _ref = section.run;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          module = _ref[_i];
          run.push('this.require(\'' + module + '\');');
        }
        result.push(run.join('\n'));
        return Q.resolve(result);
      }).then(function(result) {
        result = result.join('\n\n');
        if (minify) {
          result = Uglify.minify(result, {
            fromString: true
          }).code;
        }
        return Q.resolve(result);
      });
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
