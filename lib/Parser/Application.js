// Generated by CoffeeScript 1.6.3
(function() {
  var Application, Helpers, Package, Q, Uglify, path;

  path = require('path');

  Uglify = require('uglify-js');

  Q = require('q');

  Helpers = require('../Helpers');

  Package = require('../Package');

  Application = (function() {
    Application.prototype.minify = false;

    Application.prototype.loader = null;

    Application.prototype.basePath = null;

    Application.prototype.section = null;

    function Application(loader, basePath, section) {
      this.loader = loader;
      this.basePath = basePath;
      this.section = section;
    }

    Application.prototype.parseLibraries = function(type) {
      return this.loader.loadFiles(this.section.libraries[type]);
    };

    Application.prototype.parseAliases = function() {
      var alias, m, result, _ref;
      result = [];
      _ref = this.section.aliases;
      for (alias in _ref) {
        m = _ref[alias];
        result.push("'" + alias + "': '" + m + "'");
      }
      return result;
    };

    Application.prototype.loadBaseModuleFile = function() {
      var deferred;
      deferred = Q.defer();
      this.loader.loadFile(path.resolve(__dirname + '/../Module.js')).then(function(content) {
        content = content.replace(/\s+$/, '').replace(/;$/, '');
        return deferred.resolve(content);
      }, function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    Application.prototype.loadModules = function() {
      var deferred,
        _this = this;
      deferred = Q.defer();
      Package.findDependenciesForModules(this.section.modules).then(function(data) {
        return _this.loader.loadModules(data.files, _this.section.base).then(function(modules) {
          var node, result;
          modules = modules.concat(_this.parseAliases());
          node = Package.parseNodeInfo(data.node, _this.basePath);
          result = {
            modules: modules.join(',\n'),
            node: JSON.stringify(node)
          };
          return deferred.resolve(result);
        }, function(err) {
          return deferred.reject(err);
        });
      }, function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    Application.prototype.parseModules = function() {
      var deferred,
        _this = this;
      deferred = Q.defer();
      Q.all([this.loadModules(), this.loadBaseModuleFile()]).then(function(data) {
        var result;
        result = {
          modules: "" + data[1] + "({\n" + data[0].modules + "\n});",
          node: "require._setNodeInfo(" + data[0].node + ");\n"
        };
        return deferred.resolve(result);
      }, function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    Application.prototype.parseRun = function() {
      var m, run, _i, _len, _ref;
      run = [];
      _ref = this.section.run;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        run.push("this.require('" + m + "');");
      }
      return Q.resolve(run);
    };

    Application.prototype.parse = function() {
      var deferred,
        _this = this;
      deferred = Q.defer();
      Q.all([this.parseLibraries('begin'), this.parseModules(), this.parseRun(), this.parseLibraries('end')]).then(function(data) {
        var result;
        result = [].concat(data[0], data[1].modules, data[1].node, data[2], data[3]);
        result = result.join('\n\n');
        if (_this.minify === true) {
          result = Uglify.minify(result, {
            fromString: true
          }).code;
        }
        return deferred.resolve(result);
      }, function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
