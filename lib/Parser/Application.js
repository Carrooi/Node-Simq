// Generated by CoffeeScript 1.6.3
(function() {
  var Application, Uglify, _path;

  _path = require('path');

  Uglify = require('uglify-js');

  Application = (function() {
    Application.prototype.simq = null;

    Application.prototype.loader = null;

    Application.prototype.basePath = null;

    function Application(simq, loader, basePath) {
      this.simq = simq;
      this.loader = loader;
      this.basePath = basePath;
    }

    Application.prototype.parse = function(section, minify) {
      var result;
      if (minify == null) {
        minify = true;
      }
      result = new Array;
      this.addLibraries(section, 'begin', result);
      this.addModules(section, result);
      this.addLibraries(section, 'end', result);
      this.addRun(section, result);
      result = result.join('\n\n');
      if (minify) {
        result = Uglify.minify(result, {
          fromString: true
        }).code;
      }
      return result;
    };

    Application.prototype.addLibraries = function(section, part, result) {
      var lib, _i, _len, _ref, _results;
      if (section.libs && section.libs[part]) {
        _ref = section.libs[part];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lib = _ref[_i];
          _results.push(result.push(this.loader.loadFile(this.basePath + '/' + lib)));
        }
        return _results;
      }
    };

    Application.prototype.addRun = function(section, result) {
      var module, run, _i, _len, _ref;
      run = new Array;
      _ref = section.run;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        module = _ref[_i];
        run.push('this.require(\'' + module + '\');');
      }
      return result.push(run.join('\n'));
    };

    Application.prototype.addModules = function(section, result) {
      var alias, ext, module, modules, name, path, _i, _len, _ref, _ref1;
      modules = new Array;
      _ref = section.modules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        ext = _path.extname(path);
        name = path.replace(new RegExp('\\*?' + ext + '$'), '');
        ext = ext === '' ? null : ext.substring(1);
        if (name.substring(name.length - 1) === '/') {
          modules = modules.concat(this.loader.loadModules(this.basePath + '/' + name, ext));
        } else {
          modules.push(this.loader.loadModule(this.basePath + '/' + path));
        }
      }
      _ref1 = section.aliases;
      for (alias in _ref1) {
        module = _ref1[alias];
        modules.push('\'' + alias + '\': \'' + module + '\'');
      }
      module = this.loader.loadFile(__dirname + '/../Module.js').replace(/\s+$/, '').replace(/;$/, '');
      return result.push(module + '({' + modules.join(',\n') + '\n});');
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
