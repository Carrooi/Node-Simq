// Generated by CoffeeScript 1.6.3
(function() {
  var Application, Helpers, Package, Q, Uglify, path;

  path = require('path');

  Uglify = require('uglify-js');

  Q = require('q');

  Helpers = require('../Helpers');

  Package = require('../Package');

  Application = (function() {
    Application.prototype.minify = false;

    Application.prototype.loader = null;

    Application.prototype.basePath = null;

    Application.prototype.section = null;

    function Application(loader, basePath, section) {
      this.loader = loader;
      this.basePath = basePath;
      this.section = section;
      this.basePath = this.section.base === null ? this.basePath : this.basePath + '/' + this.section.base;
    }

    Application.prototype.parseLibraries = function(type) {
      var paths;
      paths = Helpers.expandFilesList(this.section.libraries[type], this.basePath);
      return this.loader.loadFiles(paths);
    };

    Application.prototype.parseModules = function() {
      var deferred, modules,
        _this = this;
      deferred = Q.defer();
      modules = Helpers.expandFilesList(this.section.modules, this.basePath);
      Package.findDependenciesForModules(modules).then(function(data) {
        return _this.loader.loadModules(data.files, _this.section.base).then(function(modules) {
          var alias, m, _ref;
          _ref = _this.section.aliases;
          for (alias in _ref) {
            m = _ref[alias];
            modules.push("'" + alias + "': '" + m + "'");
          }
          return _this.loader.loadFile(path.resolve(__dirname + '/../Module.js')).then(function(content) {
            var info, main, name, node, result, _ref1;
            content = content.replace(/\s+$/, '').replace(/;$/, '');
            node = {};
            _ref1 = data.node;
            for (m in _ref1) {
              info = _ref1[m];
              main = path.relative(_this.basePath, info.main);
              name = path.relative(_this.basePath, m);
              main = main.replace(/^[./]+/, '');
              name = name.replace(/^[./]+/, '');
              node[name] = {
                name: info.name,
                path: main
              };
            }
            result = {
              modules: content + '({\n' + modules.join(',\n') + '\n});',
              node: 'require._setNodeInfo(' + JSON.stringify(node) + ');\n'
            };
            return deferred.resolve(result);
          }, function(e) {
            return deferred.reject(e);
          });
        });
      });
      return deferred.promise;
    };

    Application.prototype.parseRun = function() {
      var m, run, _i, _len, _ref;
      run = [];
      _ref = this.section.run;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        run.push("this.require('" + m + "');");
      }
      return Q.resolve(run);
    };

    Application.prototype.parse = function() {
      var deferred,
        _this = this;
      deferred = Q.defer();
      return Q.all([this.parseLibraries('begin'), this.parseModules(), this.parseRun(), this.parseLibraries('end')]).then(function(data) {
        var result;
        result = [].concat(data[0], data[1].modules, data[1].node, data[2], data[3]);
        result = result.join('\n\n');
        if (_this.minify === true) {
          result = Uglify.minify(result, {
            fromString: true
          }).code;
        }
        return deferred.resolve(result);
      }, function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
