// Generated by CoffeeScript 1.6.3
(function() {
  var Application, Q, Uglify, _path;

  _path = require('path');

  Uglify = require('uglify-js');

  Q = require('q');

  Application = (function() {
    Application.prototype.simq = null;

    Application.prototype.loader = null;

    Application.prototype.basePath = null;

    function Application(simq, loader, basePath) {
      this.simq = simq;
      this.loader = loader;
      this.basePath = basePath;
    }

    Application.prototype.parse = function(section, minify) {
      var _this = this;
      if (minify == null) {
        minify = true;
      }
      return (function() {
        var deferred;
        deferred = Q.defer();
        deferred.resolve(new Array);
        return deferred.promise;
      })().then(function(result) {
        var deferred, lib, _i, _len, _ref;
        _ref = section.libs.begin;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lib = _ref[_i];
          result.push(_this.loader.loadFile(_this.basePath + '/' + lib));
        }
        deferred = Q.defer();
        deferred.resolve(result);
        return deferred.promise;
      }).then(function(result) {
        var alias, deferred, ext, module, modules, name, path, _i, _len, _ref, _ref1;
        modules = new Array;
        _ref = section.modules;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          path = _ref[_i];
          ext = _path.extname(path);
          name = path.replace(new RegExp('\\*?' + ext + '$'), '');
          ext = ext === '' ? null : ext.substring(1);
          if (name.substring(name.length - 1) === '/') {
            modules = modules.concat(_this.loader.loadModules(_this.basePath + '/' + name, ext));
          } else {
            modules.push(_this.loader.loadModule(_this.basePath + '/' + path));
          }
        }
        _ref1 = section.aliases;
        for (alias in _ref1) {
          module = _ref1[alias];
          modules.push('\'' + alias + '\': \'' + module + '\'');
        }
        module = _this.loader.loadFile(__dirname + '/../Module.js').replace(/\s+$/, '').replace(/;$/, '');
        result.push(module + '({' + modules.join(',\n') + '\n});');
        deferred = Q.defer();
        deferred.resolve(result);
        return deferred.promise;
      }).then(function(result) {
        var deferred, lib, _i, _len, _ref;
        _ref = section.libs.end;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lib = _ref[_i];
          result.push(_this.loader.loadFile(_this.basePath + '/' + lib));
        }
        deferred = Q.defer();
        deferred.resolve(result);
        return deferred.promise;
      }).then(function(result) {
        var deferred, module, run, _i, _len, _ref;
        run = new Array;
        _ref = section.run;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          module = _ref[_i];
          run.push('this.require(\'' + module + '\');');
        }
        result.push(run.join('\n'));
        deferred = Q.defer();
        deferred.resolve(result);
        return deferred.promise;
      }).then(function(result) {
        var deferred;
        result = result.join('\n\n');
        if (minify) {
          result = Uglify.minify(result, {
            fromString: true
          }).code;
        }
        deferred = Q.defer();
        deferred.resolve(result);
        return deferred.promise;
      });
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
