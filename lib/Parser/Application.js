// Generated by CoffeeScript 1.6.3
(function() {
  var Application, Helpers, Q, Uglify, path;

  path = require('path');

  Uglify = require('uglify-js');

  Q = require('q');

  Helpers = require('./ApplicationHelpers');

  Application = (function() {
    Application.prototype.simq = null;

    Application.prototype.loader = null;

    Application.prototype.basePath = null;

    Application.prototype.section = null;

    Application.prototype.packageName = null;

    function Application(simq, loader, basePath, section, packageName) {
      this.simq = simq;
      this.loader = loader;
      this.basePath = basePath;
      this.section = section;
      this.packageName = packageName;
    }

    Application.prototype.parseLibraries = function(base, list) {
      return Helpers.loadLibraries(this.loader, list, base);
    };

    Application.prototype.parseModules = function(sectionBase, base, modules, aliases) {
      var deferred,
        _this = this;
      deferred = Q.defer();
      Helpers.findDependentModulesFromList(modules, base).then(function(data) {
        return Helpers.loadModules(_this.loader, data.files, sectionBase).then(function(modules) {
          var alias, module;
          for (alias in aliases) {
            module = aliases[alias];
            modules.push("'" + alias + "': '" + module + "'");
          }
          return _this.loader.loadFile(__dirname + '/../Module.js').then(function(content) {
            var info, main, name, node, result, _ref;
            content = content.replace(/\s+$/, '').replace(/;$/, '');
            base = path.resolve(base);
            node = {};
            _ref = data.node;
            for (module in _ref) {
              info = _ref[module];
              main = path.relative(base, info.main);
              name = path.relative(base, module);
              main = main.replace(/^[./]+/, '');
              name = name.replace(/^[./]+/, '');
              node[name] = {
                name: info.name,
                path: main
              };
            }
            result = {
              modules: content + '({\n' + modules.join(',\n') + '\n});',
              node: 'require._setNodeInfo(' + JSON.stringify(node) + ');\n'
            };
            return deferred.resolve(result);
          }, function(e) {
            return deferred.reject(e);
          });
        });
      });
      return deferred.promise;
    };

    Application.prototype.parseRun = function(list) {
      var module, run, _i, _len;
      run = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        module = list[_i];
        run.push("this.require('" + module + "');");
      }
      return Q.resolve(run);
    };

    Application.prototype.parse = function() {
      var base, modules, nodeModules,
        _this = this;
      base = this.section.base === null ? this.basePath : this.basePath + '/' + this.section.base;
      nodeModules = Helpers.translateNodeModulesList(this.section.nodeModules);
      modules = this.section.modules.concat(nodeModules);
      return Q.all([this.parseLibraries(base, this.section.libraries.begin), this.parseModules(this.section.base, base, modules, this.section.aliases), this.parseRun(this.section.run), this.parseLibraries(base, this.section.libraries.end)]).then(function(data) {
        var result;
        result = [].concat(data[0], data[1].modules, data[1].node, data[2], data[3]);
        result = result.join('\n\n');
        if (!_this.simq.config.load()["debugger"].scripts) {
          result = Uglify.minify(result, {
            fromString: true
          }).code;
        }
        return Q.resolve(result);
      });
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
