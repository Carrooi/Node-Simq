// Generated by CoffeeScript 1.6.3
(function() {
  var Application, Finder, Q, Uglify, fs, _path;

  _path = require('path');

  Uglify = require('uglify-js');

  Q = require('q');

  Finder = require('fs-finder');

  fs = require('fs');

  Application = (function() {
    Application.prototype.simq = null;

    Application.prototype.loader = null;

    Application.prototype.basePath = null;

    function Application(simq, loader, basePath) {
      this.simq = simq;
      this.loader = loader;
      this.basePath = basePath;
    }

    Application.prototype.parse = function(section, packageName) {
      var base, data,
        _this = this;
      base = this.basePath + '/' + (section.base ? section.base + '/' : '');
      data = {
        data: section,
        result: {
          modules: [],
          final: []
        }
      };
      return Q.resolve(data).then(function(data) {
        var deferred;
        deferred = Q.defer();
        _this.loadFiles(data.data.libs.begin, base).then(function(result) {
          data.result.final = result;
          return deferred.resolve(data);
        });
        return deferred.promise;
      }).then(function(data) {
        var deferred, modules;
        modules = _this.findModules(section.modules, section.base);
        deferred = Q.defer();
        _this.loader.loadModules(modules, section.base).then(function(modules) {
          data.result.modules = modules;
          return deferred.resolve(data);
        }, function(e) {
          return deferred.reject(e);
        });
        return deferred.promise;
      }).then(function(data) {
        var alias, deferred, module, _ref;
        _ref = data.data.aliases;
        for (alias in _ref) {
          module = _ref[alias];
          data.result.modules.push('\'' + alias + '\': \'' + module + '\'');
        }
        deferred = Q.defer();
        _this.loader.loadFile(__dirname + '/../Module.js').then(function(content) {
          content = content.replace(/\s+$/, '').replace(/;$/, '');
          data.result.final.push(content + '({' + data.result.modules.join(',\n') + '\n});');
          return deferred.resolve(data);
        }, function(e) {
          return deferred.reject(e);
        });
        return deferred.promise;
      }).then(function(data) {
        var deferred;
        deferred = Q.defer();
        _this.loadFiles(data.data.libs.end, base).then(function(result) {
          data.result.final = data.result.final.concat(result);
          return deferred.resolve(data);
        });
        return deferred.promise;
      }).then(function(data) {
        var module, run, _i, _len, _ref;
        run = [];
        _ref = section.run;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          module = _ref[_i];
          run.push('this.require(\'' + module + '\');');
        }
        data.result.final.push(run.join('\n'));
        return Q.resolve(data);
      }).then(function(data) {
        var result;
        result = data.result.final.join('\n\n');
        if (!_this.simq.config.load()["debugger"].scripts) {
          result = Uglify.minify(result, {
            fromString: true
          }).code;
        }
        return Q.resolve(result);
      });
    };

    Application.prototype.loadFiles = function(files, base) {
      var buf, data, deferred, fn, fns, i, _i, _ref,
        _this = this;
      data = {
        result: [],
        progress: null,
        files: files
      };
      fn = function(data) {
        var actual, deferred, file;
        deferred = Q.defer();
        actual = data.progress === null ? 0 : data.progress;
        file = data.files[actual].match(/^https?\:\/\//) === null ? base + data.files[actual] : data.files[actual];
        _this.loader.loadFile(file).then(function(content) {
          if (content !== null) {
            data.result.push(content);
          }
          return deferred.resolve(data);
        }, function(e) {
          return deferred.reject(e);
        });
        data.progress++;
        return deferred.promise;
      };
      fns = [];
      for (i = _i = 1, _ref = files.length; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        fns.push(fn);
      }
      deferred = Q.defer();
      buf = fns.reduce(function(soFar, f) {
        return soFar.then(f);
      }, Q.resolve(data));
      buf.then(function(libs) {
        return deferred.resolve(libs.result);
      });
      return deferred.promise;
    };

    Application.prototype.findModules = function(paths, base) {
      var filter, path, result, _i, _len;
      if (base == null) {
        base = null;
      }
      result = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        if (base !== null) {
          path = './' + base + '/' + path;
        }
        path = _path.resolve(this.basePath + '/' + path);
        if (fs.existsSync(path) && fs.statSync(path).isFile()) {
          result.push(path);
        } else {
          filter = function(stat, file) {
            return file.substr(file.length - 1) !== '~';
          };
          path = Finder.parseDirectory(path);
          result = result.concat((new Finder(path.directory)).recursively().filter(filter).findFiles(path.mask));
        }
      }
      return result;
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);
