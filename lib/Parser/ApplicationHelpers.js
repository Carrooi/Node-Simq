// Generated by CoffeeScript 1.6.3
(function() {
  var ApplicationHelpers, Finder, Q, fs, path, required;

  required = require('required');

  Q = require('q');

  fs = require('fs');

  path = require('path');

  Finder = require('fs-finder');

  ApplicationHelpers = (function() {
    function ApplicationHelpers() {}

    ApplicationHelpers.findDependentModules = function(from) {
      var deferred, info, result,
        _this = this;
      if (path.extname(from) !== '.js') {
        result = {
          files: [from],
          core: [],
          node: {}
        };
        if ((info = this.findPackageInfo(from)) !== null) {
          result.node[info.dir] = {
            name: info.name,
            main: info.main
          };
        }
        return Q.resolve(result);
      }
      deferred = Q.defer();
      required(from, {
        ignoreMissing: true
      }, function(e, deps) {
        var dep, ext, file, res, _i, _j, _len, _len1, _ref;
        if (e) {
          return deferred.reject(e);
        } else {
          res = {
            files: [from],
            core: [],
            node: {}
          };
          for (_i = 0, _len = deps.length; _i < _len; _i++) {
            dep = deps[_i];
            ext = _this.parseDependencies(dep);
            res.files = res.files.concat(ext.files);
            res.core = res.core.concat(ext.core);
          }
          _ref = res.files;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            file = _ref[_j];
            if ((info = _this.findPackageInfo(file)) !== null) {
              res.files.push(info.main);
              res.node[info.dir] = {
                name: info.name,
                main: info.main
              };
            }
          }
          res.files = _this.removeDuplicates(res.files);
          res.core = _this.removeDuplicates(res.core);
          return deferred.resolve(res);
        }
      });
      return deferred.promise;
    };

    ApplicationHelpers.parseDependencies = function(dep) {
      var ext, result, sub, _i, _len, _ref;
      result = {
        files: [],
        core: []
      };
      if (dep.core === true) {
        result.core.push(dep.id);
      } else {
        result.files.push(dep.filename);
        _ref = dep.deps;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sub = _ref[_i];
          ext = this.parseDependencies(sub);
          result.files = result.files.concat(ext.files);
          result.core = result.core.concat(ext.core);
        }
      }
      return result;
    };

    ApplicationHelpers.isInModule = function(file) {
      return file.lastIndexOf('/node_modules/') !== -1;
    };

    ApplicationHelpers.getModuleName = function(file) {
      var buf;
      if (!this.isInModule(file)) {
        return null;
      }
      buf = file.substr(file.lastIndexOf('/node_modules/') + 14);
      return buf.substr(0, buf.indexOf('/'));
    };

    ApplicationHelpers.getModuleBaseDir = function(file) {
      if (!this.isInModule(file)) {
        return null;
      }
      return file.substr(0, file.lastIndexOf('/node_modules/') + 14) + this.getModuleName(file);
    };

    ApplicationHelpers.resolveNodeFile = function(_path) {
      _path = path.resolve(_path);
      if (fs.existsSync(_path)) {
        if (fs.statSync(_path).isDirectory()) {
          return this.resolveNodeFile(_path + '/index');
        } else {
          return _path;
        }
      } else if (fs.existsSync(_path + '.js')) {
        return _path + '.js';
      } else if (fs.existsSync(_path + '.json')) {
        return _path + '.json';
      } else if (fs.existsSync(_path + '.coffee')) {
        return _path + '.coffee';
      } else if (fs.existsSync(_path + '.ts')) {
        return _path + '.ts';
      } else if (fs.existsSync(_path + '.eco')) {
        return _path + '.eco';
      } else {
        return null;
      }
    };

    ApplicationHelpers.findNodePackage = function(file) {
      if (!this.isInModule(file)) {
        return null;
      }
      return this.getModuleBaseDir(file) + '/package.json';
    };

    ApplicationHelpers.findPackageInfo = function(file) {
      var dir, main, pckg, result;
      if (!this.isInModule(file)) {
        return null;
      }
      pckg = this.findNodePackage(file);
      pckg = JSON.parse(fs.readFileSync(pckg, {
        encoding: 'utf8'
      }));
      main = typeof pckg.main === 'undefined' ? './index' : pckg.main;
      dir = this.getModuleBaseDir(file);
      main = dir + '/' + main;
      main = this.resolveNodeFile(main);
      result = {
        file: file,
        name: this.getModuleName(file),
        main: path.normalize(main),
        dir: dir
      };
      return result;
    };

    ApplicationHelpers.parseModulesList = function(list, basePath) {
      var module, modules, _i, _len;
      modules = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        module = list[_i];
        module = path.resolve(basePath + '/' + module);
        if (fs.existsSync(module)) {
          modules.push(module);
        } else {
          modules = modules.concat(Finder.findFiles(module));
        }
      }
      modules = this.removeDuplicates(modules);
      return modules;
    };

    ApplicationHelpers.findDependentModulesFromList = function(list, basePath) {
      var module, modules, _i, _len, _ref;
      modules = [];
      _ref = this.parseModulesList(list, basePath);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        module = _ref[_i];
        modules.push(this.findDependentModules(module));
      }
      return Q.all(modules).then(function(modules) {
        var info, name, result, _j, _k, _l, _len1, _len2, _len3, _ref1, _ref2, _ref3;
        result = {
          files: [],
          core: [],
          node: {}
        };
        for (_j = 0, _len1 = modules.length; _j < _len1; _j++) {
          module = modules[_j];
          _ref1 = module.files;
          for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
            name = _ref1[_k];
            if (result.files.indexOf(name) === -1) {
              result.files.push(name);
            }
          }
          _ref2 = module.core;
          for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
            name = _ref2[_l];
            if (result.core.indexOf(name) === -1) {
              result.core.push(name);
            }
          }
          _ref3 = module.node;
          for (name in _ref3) {
            info = _ref3[name];
            if (typeof result.node[name] === 'undefined') {
              result.node[name] = info;
            }
          }
        }
        return Q.resolve(result);
      });
    };

    ApplicationHelpers.loadModules = function(loader, modules, base) {
      var module, result, _i, _len;
      result = [];
      for (_i = 0, _len = modules.length; _i < _len; _i++) {
        module = modules[_i];
        result.push(loader.loadModule(module, base));
      }
      return Q.all(result);
    };

    ApplicationHelpers.findLibrariesFromList = function(list, basePath) {
      var file, libraries, _i, _len;
      libraries = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        file = list[_i];
        if (file.match(/^https?\:\/\//) === null) {
          file = path.resolve(basePath + '/' + file);
          if (fs.existsSync(file)) {
            libraries.push(file);
          } else {
            libraries = libraries.concat(Finder.findFiles(file));
          }
        } else {
          libraries.push(file);
        }
      }
      libraries = this.removeDuplicates(libraries);
      return libraries;
    };

    ApplicationHelpers.loadLibraries = function(loader, libraries, basePath) {
      var library, result, _i, _len;
      libraries = this.findLibrariesFromList(libraries, basePath);
      result = [];
      for (_i = 0, _len = libraries.length; _i < _len; _i++) {
        library = libraries[_i];
        result.push(loader.loadFile(library));
      }
      return Q.all(result);
    };

    ApplicationHelpers.removeDuplicates = function(array) {
      return array.filter(function(el, pos) {
        return array.indexOf(el) === pos;
      });
    };

    return ApplicationHelpers;

  })();

  module.exports = ApplicationHelpers;

}).call(this);
