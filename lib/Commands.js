// Generated by CoffeeScript 1.6.3
(function() {
  var Commands, express, fs, ncp, path;

  fs = require('fs');

  ncp = require('ncp');

  path = require('path');

  express = require('express');

  Commands = (function() {
    Commands.prototype.simq = null;

    Commands.prototype.v = false;

    function Commands(simq) {
      this.simq = simq;
    }

    Commands.prototype.server = function() {
      /*app = express()
      		config = @config.load()
      		base = if config.routes.prefix == null then '/' else '/' + config.routes.prefix
      
      		main = path.resolve(@basePath + '/' + config.routes.main)
      		if fs.existsSync(main)
      			console.log "Mapping file '#{main}' to '#{base}'" if @v
      			app.get(base, (req, res) ->
      				res.setHeader('Content-Type', 'text/html')
      				res.sendfile(main)
      			)
      
      		for route, _path of config.routes.routes
      			route = base + route
      			_path = path.resolve(@basePath + '/' + _path)
      			data = {route: route, path: _path}
      
      			if fs.statSync(_path).isDirectory()
      				console.log "Mapping directory '#{_path}' to '#{route}'" if @v
      				app.use(route, express.static(_path))
      			else
      				((data) =>
      					console.log "Mapping file '#{data.path}' to '#{data.route}'" if @v
      					app.get(data.route, (req, res) ->
      						res.setHeader('Content-Type', mime.lookup(data.path))
      						res.sendfile(data.path)
      					)
      				)(data)
      
      		for name, pckg of config.packages
      			if pckg.skip == false
      				pckg.name = name
      				((pckg) =>
      					if @hasPackageApplication(pckg.name)
      						_path = base + path.relative(@basePath, pckg.application)
      						console.log 'Mapping file \'' + path.resolve(pckg.application) + '\' to \'' + _path + '\'' if @v
      						app.get(_path, (req, res) =>
      							@buildApplication(pckg.name).then( (content) ->
      								res.setHeader('Content-Type', 'application/javascript')
      								res.send(content)
      							)
      						)
      
      					if @hasPackageStyles(pckg.name)
      						_path = base + path.relative(@basePath, pckg.style.out)
      						console.log 'Mapping file \'' + path.resolve(pckg.style.out) + '\' to \'' + _path + '\'' if @v
      						app.get(_path, (req, res) =>
      							@buildStyles(pckg.name).then( (content) ->
      								res.setHeader('Content-Type', 'text/css')
      								res.send(content)
      							)
      						)
      				)(pckg)
      
      		app.listen(config.server.port)
      		console.log 'Listening on port ' + config.server.port
      */

    };

    Commands.prototype.build = function() {
      return this.simq.buildToFiles();
    };

    Commands.prototype.watch = function() {
      var ignore, name, pckg, _ref,
        _this = this;
      this.build();
      ignore = new Array;
      _ref = this.simq.packages;
      for (name in _ref) {
        pckg = _ref[name];
        if (pckg.application !== null) {
          ignore.push(pckg.application);
        }
        if (pckg.style !== null) {
          ignore.push(pckg.style.out);
        }
      }
      return watch.watchTree(this.basePath, {}, function(file, curr, prev) {
        if (typeof file === 'string' && file.match(/~$/) === null && file.match(/^\./) === null && ignore.indexOf(path.resolve(file)) === -1) {
          if (_this.v) {
            console.log(file);
          }
          return _this.build();
        }
      });
    };

    Commands.prototype.create = function(name) {
      var _path;
      if (!name) {
        throw new Error('Please enter name of new application.');
      }
      _path = path.resolve(name);
      if (fs.existsSync(_path)) {
        throw new Error('Directory with ' + name + ' name is already exists.');
      }
      return ncp.ncp(path.normalize(__dirname + '/../sandbox'), _path, function(err) {
        if (err) {
          throw new Error('There is some error with creating new application.');
        }
      });
    };

    Commands.prototype.clean = function() {
      var name, pckg, _i, _len, _ref, _results;
      _ref = this.simq.packages;
      _results = [];
      for (pckg = _i = 0, _len = _ref.length; _i < _len; pckg = ++_i) {
        name = _ref[pckg];
        if (pckg.application !== null && fs.existsSync(pckg.application)) {
          if (this.v) {
            console.log("Removing '" + pckg.application + "' file");
          }
          fs.unlinkSync(pckg.application);
        }
        if (pckg.style !== null && fs.existsSync(pckg.style.out)) {
          if (this.v) {
            console.log("Removing '" + pckg.style.out + "' file");
          }
          _results.push(fs.unlinkSync(pckg.style.out));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Commands;

  })();

  module.exports = Commands;

}).call(this);
