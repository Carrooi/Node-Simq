// Generated by CoffeeScript 1.6.3
(function() {
  var Commands, Compiler, EventEmitter, Q, express, fs, mime, ncp, path, watch,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  ncp = require('ncp');

  path = require('path');

  express = require('express');

  mime = require('mime');

  Compiler = require('source-compiler');

  Q = require('q');

  watch = require('watch');

  EventEmitter = require('events').EventEmitter;

  Commands = (function(_super) {
    __extends(Commands, _super);

    Commands.prototype.simq = null;

    function Commands(simq) {
      this.simq = simq;
    }

    Commands.prototype.server = function(prefix, main, routes, port) {
      var app, base, data, name, pckg, route, _path, _ref,
        _this = this;
      if (prefix == null) {
        prefix = null;
      }
      if (main == null) {
        main = './public/index.html';
      }
      if (routes == null) {
        routes = {};
      }
      if (port == null) {
        port = 3000;
      }
      app = express();
      base = prefix === null ? '/' : '/' + prefix;
      main = path.join(this.simq.basePath, main);
      if (fs.existsSync(main)) {
        app.get(base, function(req, res) {
          res.setHeader('Content-Type', 'text/html');
          return res.sendfile(main);
        });
      }
      for (route in routes) {
        _path = routes[route];
        route = path.normalize(base + '/./' + route);
        _path = path.resolve(this.simq.basePath + '/' + _path);
        data = {
          route: route,
          path: _path
        };
        if (fs.statSync(_path).isDirectory()) {
          app.use(route, express["static"](_path));
        } else {
          (function(data) {
            return app.get(data.route, function(req, res) {
              res.setHeader('Content-Type', mime.lookup(data.path));
              return res.sendfile(data.path);
            });
          })(data);
        }
      }
      this.emit('build', this.simq);
      _ref = this.simq.packages;
      for (name in _ref) {
        pckg = _ref[name];
        if (pckg.skip === false) {
          pckg.name = name;
          (function(pckg) {
            if (pckg.application !== null) {
              _path = path.relative(_this.simq.basePath, pckg.application);
              _path = path.normalize(base + '/./' + _path);
              app.get(_path, function(req, res) {
                return _this.simq.buildPackage(pckg.name).then(function(data) {
                  res.setHeader('Content-Type', 'application/javascript');
                  return res.send(data.js);
                }).fail(function(err) {
                  throw err;
                }).done();
              });
            }
            if (pckg.style !== null) {
              _path = path.relative(_this.simq.basePath, pckg.style.out);
              _path = path.normalize(base + '/./' + _path);
              return app.get(_path, function(req, res) {
                return _this.simq.buildPackage(pckg.name).then(function(data) {
                  res.setHeader('Content-Type', 'text/css');
                  return res.send(data.css);
                }).fail(function(err) {
                  throw err;
                }).done();
              });
            }
          })(pckg);
        }
      }
      return app.listen(port);
    };

    Commands.prototype.build = function() {
      this.emit('build', this.simq);
      return this.simq.buildToFiles();
    };

    Commands.prototype.watch = function() {
      var ignore, name, pckg, _ref,
        _this = this;
      this.build().fail(function(err) {
        throw err;
      }).done();
      ignore = new Array;
      _ref = this.simq.packages;
      for (name in _ref) {
        pckg = _ref[name];
        if (pckg.application !== null) {
          ignore.push(pckg.application);
        }
        if (pckg.style !== null) {
          ignore.push(pckg.style.out);
        }
      }
      return watch.watchTree(this.simq.basePath, {}, function(file, curr, prev) {
        if (typeof file === 'string' && file.match(/~$/) === null && file.match(/^\./) === null && ignore.indexOf(path.resolve(file)) === -1) {
          console.log(file);
          return _this.build().fail(function(err) {
            throw err;
          }).done();
        }
      });
    };

    Commands.prototype.create = function(name) {
      var deferred, _path;
      if (!name) {
        return Q.reject(new Error('Please enter name of new application.'));
      }
      _path = path.resolve(this.simq.basePath + '/' + name);
      if (fs.existsSync(_path)) {
        return Q.reject(new Error('Directory ' + name + ' already exists.'));
      }
      deferred = Q.defer();
      ncp.ncp(path.normalize(__dirname + '/../sandbox'), _path, function(err) {
        if (err) {
          return deferred.reject(new Error('There is some error with creating new application.'));
        } else {
          return deferred.resolve();
        }
      });
      return deferred.promise;
    };

    Commands.prototype.clean = function(cacheDirectory) {
      var name, pckg, _path, _ref, _results;
      if (cacheDirectory == null) {
        cacheDirectory = null;
      }
      _ref = this.simq.packages;
      _results = [];
      for (name in _ref) {
        pckg = _ref[name];
        if (pckg.application !== null && fs.existsSync(pckg.application)) {
          fs.unlinkSync(pckg.application);
        }
        if (pckg.style !== null && fs.existsSync(pckg.style.out)) {
          fs.unlinkSync(pckg.style.out);
        }
        if (cacheDirectory !== null) {
          _path = path.join(this.simq.basePath, cacheDirectory + '/__' + Compiler.CACHE_NAMESPACE + '.json');
          if (fs.existsSync(_path)) {
            _results.push(fs.unlinkSync(_path));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Commands;

  })(EventEmitter);

  module.exports = Commands;

}).call(this);
