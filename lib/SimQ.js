// Generated by CoffeeScript 1.6.3
(function() {
  var Configurator, Parser, SimQ, fs, less, ncp, watch, _path;

  fs = require('fs');

  watch = require('watch');

  _path = require('path');

  ncp = require('ncp');

  less = require('less');

  Parser = require('./Parser/Parser');

  Configurator = require('./Config/Configurator');

  SimQ = (function() {
    SimQ.prototype.basePath = '.';

    SimQ.prototype.configPath = 'config/setup.json';

    SimQ.prototype.config = null;

    SimQ.prototype.debug = false;

    SimQ.prototype.parser = null;

    function SimQ(debug, basePath, configPath) {
      this.debug = debug != null ? debug : false;
      this.basePath = basePath != null ? basePath : '.';
      if (configPath == null) {
        configPath = null;
      }
      if (!configPath) {
        configPath = this.configPath;
      }
      this.configPath = _path.resolve(this.basePath + '/' + configPath);
      this.config = new Configurator(this.configPath, this.debug);
      this.parser = new Parser(this, this.basePath);
    }

    SimQ.prototype.build = function() {
      var config, name, pckg, _fn, _ref,
        _this = this;
      config = this.config.load();
      _ref = config.packages;
      _fn = function(pckg) {
        if (pckg.application) {
          _this.parser.parseApplication(pckg, pckg.name).then(function(content) {
            return fs.writeFile(_this.basePath + '/' + pckg.application, content);
          }, function(e) {
            throw e;
          }).done();
        }
        if (pckg.style && pckg.style["in"] && pckg.style.out) {
          return _this.parser.parseStyle(pckg.style["in"], pckg.name).then(function(content) {
            return fs.writeFile(_this.basePath + '/' + pckg.style.out, content);
          }, function(e) {
            throw e;
          }).done();
        }
      };
      for (name in _ref) {
        pckg = _ref[name];
        pckg.name = name;
        _fn(pckg);
      }
      return this;
    };

    SimQ.prototype.watch = function() {
      var ignore, name, pckg, _ref,
        _this = this;
      this.build();
      ignore = new Array;
      _ref = this.config.load().packages;
      for (name in _ref) {
        pckg = _ref[name];
        if (pckg.application) {
          ignore.push(_path.resolve(pckg.application));
        }
        if (pckg.style.out) {
          ignore.push(_path.resolve(pckg.style.out));
        }
      }
      watch.watchTree(this.basePath, {}, function(file, curr, prev) {
        if (typeof file === 'string' && file.match(/~$/) === null && file.match(/^\./) === null && ignore.indexOf(_path.resolve(file)) === -1) {
          console.log(file);
          _this.config.invalidate();
          return _this.build();
        }
      });
      return this;
    };

    SimQ.create = function(name) {
      var path;
      if (!name) {
        throw new Error('Please enter name of new application.');
      }
      path = _path.resolve(name);
      if (fs.existsSync(path)) {
        throw new Error('Directory with ' + name + ' name is already exists.');
      }
      return ncp.ncp(_path.normalize(__dirname + '/../sandbox'), path, function(err) {
        if (err) {
          throw new Error('There is some error with creating new application.');
        }
      });
    };

    SimQ.prototype.getModuleName = function(path) {
      path = _path.resolve(path);
      path = path.replace(new RegExp('^' + process.cwd() + '\/'), '');
      return path;
    };

    return SimQ;

  })();

  module.exports = SimQ;

}).call(this);
