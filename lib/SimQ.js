// Generated by CoffeeScript 1.6.2
(function() {
  var Loader, Parser, SimQ, fs, watch, _path;

  fs = require('fs');

  watch = require('watch');

  _path = require('path');

  Loader = require('./Loader');

  Parser = require('./Parser');

  SimQ = (function() {
    SimQ.prototype.basePath = '.';

    SimQ.prototype.config = null;

    SimQ.prototype.configPath = 'setup.json';

    SimQ.prototype.debug = false;

    SimQ.prototype.parser = null;

    function SimQ() {
      this.parser = new Parser(new Loader(this), this.basePath);
    }

    SimQ.prototype.build = function() {
      fs.writeFileSync(this.basePath + '/' + this.getConfig().application, this.parser.parse(this.getConfig()));
      return this;
    };

    SimQ.prototype.watch = function() {
      var _this = this;

      this.build();
      watch.watchTree(this.basePath, {
        persistent: true,
        interval: 1000
      }, function(file, curr, prev) {
        if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
          return _this.build();
        }
      });
      return this;
    };

    SimQ.prototype.getModuleName = function(path) {
      path = _path.normalize(path);
      return path.replace(new RegExp(_path.extname(path) + '$'), '');
    };

    SimQ.prototype.getConfig = function() {
      if (this.config === null) {
        if (!fs.existsSync(this.basePath + '/' + this.configPath)) {
          throw new Error('Config file setup.json was not found.');
        }
        this.config = JSON.parse(fs.readFileSync(this.basePath + '/' + this.configPath));
        if (this.config.main) {
          this.config.application = this.config.main;
          delete this.config.main;
        }
      }
      return this.config;
    };

    return SimQ;

  })();

  module.exports = SimQ;

}).call(this);
