// Generated by CoffeeScript 1.6.3
(function() {
  var Builder, Package, Q, SimQ, fs;

  Q = require('q');

  fs = require('fs');

  Package = require('./Package/Package');

  Builder = require('./Package/Builder');

  SimQ = (function() {
    SimQ.prototype.packages = null;

    SimQ.prototype.basePath = null;

    SimQ.prototype.jquerify = false;

    SimQ.prototype.minify = false;

    SimQ.prototype.stats = false;

    SimQ.prototype.logger = null;

    function SimQ(basePath) {
      this.basePath = basePath;
      this.packages = {};
    }

    SimQ.prototype.release = function() {
      this.packages = {};
      return this.jquerify = false;
    };

    SimQ.prototype.hasPackage = function(name) {
      return typeof this.packages[name] !== 'undefined';
    };

    SimQ.prototype.addPackage = function(name, pckg) {
      if (pckg == null) {
        pckg = null;
      }
      if (this.hasPackage(name)) {
        throw new Error('Package ' + name + ' is already registered.');
      }
      if (pckg === null) {
        this.packages[name] = new Package(this.basePath);
      } else {
        if (!(pckg instanceof Package)) {
          throw new Error('Package ' + name + ' must be an instance of Package/Package.');
        }
        this.packages[name] = pckg;
      }
      this.packages[name].name = name;
      return this.packages[name];
    };

    SimQ.prototype.getPackage = function(name) {
      if (!this.hasPackage(name)) {
        throw new Error('Package ' + name + ' is not registered.');
      }
      return this.packages[name];
    };

    SimQ.prototype.removePackage = function(name) {
      if (!this.hasPackage(name)) {
        throw new Error('Package ' + name + ' is not registered.');
      }
      delete this.packages[name];
      return this;
    };

    SimQ.prototype.buildPackage = function(name) {
      var builder;
      if (!this.hasPackage(name)) {
        throw new Error('Package ' + name + ' is not registered.');
      }
      builder = new Builder(this.packages[name]);
      builder.logger = this.logger;
      builder.jquerify = this.jquerify;
      builder.minify = this.minify;
      builder.stats = this.stats;
      return builder.build();
    };

    SimQ.prototype.buildPackageToFile = function(name) {
      var deferred,
        _this = this;
      if (!this.hasPackage(name)) {
        throw new Error('Package ' + name + ' is not registered.');
      }
      deferred = Q.defer();
      this.buildPackage(name).then(function(data) {
        if (data.js !== null) {
          fs.writeFileSync(_this.packages[name].target, data.js);
        }
        if (data.css !== null) {
          fs.writeFileSync(_this.packages[name].style.out, data.css);
        }
        return deferred.resolve(data);
      }).fail(function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    SimQ.prototype.build = function() {
      var deferred, name, pckg, result, _ref,
        _this = this;
      deferred = Q.defer();
      result = [];
      _ref = this.packages;
      for (name in _ref) {
        pckg = _ref[name];
        result.push(this.buildPackage(name));
      }
      Q.all(result).then(function(data) {
        var count, _ref1;
        result = {};
        count = 0;
        _ref1 = _this.packages;
        for (name in _ref1) {
          pckg = _ref1[name];
          result[name] = data[count];
          count++;
        }
        return deferred.resolve(result);
      }).fail(function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    SimQ.prototype.buildToFiles = function() {
      var deferred, name, pckg, result, _ref,
        _this = this;
      deferred = Q.defer();
      result = [];
      _ref = this.packages;
      for (name in _ref) {
        pckg = _ref[name];
        if (pckg.target !== null) {
          result.push(this.buildPackageToFile(name));
        }
      }
      Q.all(result).then(function(data) {
        var count, _ref1;
        result = {};
        count = 0;
        _ref1 = _this.packages;
        for (name in _ref1) {
          pckg = _ref1[name];
          result[name] = data[count];
          count++;
        }
        return deferred.resolve(result);
      }).fail(function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    return SimQ;

  })();

  module.exports = SimQ;

}).call(this);
