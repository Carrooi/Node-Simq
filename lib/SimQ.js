// Generated by CoffeeScript 1.6.2
(function() {
  var Loader, SimQ, coffee, eco, fs, watch, _path;

  fs = require('fs');

  coffee = require('coffee-script');

  eco = require('eco');

  watch = require('watch');

  _path = require('path');

  Loader = require('./Loader');

  SimQ = (function() {
    SimQ.prototype.basePath = '.';

    SimQ.prototype.config = null;

    SimQ.prototype.configPath = 'setup.json';

    SimQ.prototype.debug = false;

    SimQ.prototype.modules = [];

    SimQ.prototype.loader = null;

    function SimQ() {
      this.loader = new Loader(this);
    }

    SimQ.prototype.build = function() {
      fs.writeFileSync(this.basePath + '/' + this.getConfig().main, this.parse());
      return this;
    };

    SimQ.prototype.watch = function() {
      var _this = this;

      this.build();
      watch.watchTree(this.basePath, {
        persistent: true,
        interval: 1000
      }, function(file, curr, prev) {
        if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
          return _this.build();
        }
      });
      return this;
    };

    SimQ.prototype.parse = function() {
      var alias, config, ext, lib, module, modules, name, path, result, run, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4;

      result = new Array;
      config = this.getConfig();
      if (config.libs && config.libs.begin) {
        _ref = config.libs.begin;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lib = _ref[_i];
          result.push(this.loader.loadFile(this.basePath + '/' + lib));
        }
      }
      if (config.modules || config.aliases) {
        modules = new Array;
        if (config.modules) {
          _ref1 = config.modules;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            path = _ref1[_j];
            ext = _path.extname(path);
            name = path.replace(new RegExp('\\*?' + ext + '$'), '');
            ext = ext === '' ? null : ext.substring(1);
            if (name.substring(name.length - 1) === '/') {
              modules = modules.concat(this.loader.loadModules(this.basePath + '/' + name, ext));
            } else {
              modules.push(this.loader.loadModule(this.basePath + '/' + path));
            }
          }
        }
        if (config.aliases) {
          _ref2 = config.aliases;
          for (alias in _ref2) {
            module = _ref2[alias];
            if (this.modules.indexOf(module) === -1) {
              throw new Error('Module ' + module + ' was not found.');
            }
            this.modules.push(alias);
            modules.push('\'' + alias + '\': \'' + module + '\'');
          }
        }
        module = this.loader.loadFile(__dirname + '/Module.js').replace(/\s+$/, '').replace(/;$/, '');
        result.push(module + '({' + modules.join(',\n') + '\n});');
      }
      if (config.libs && config.libs.end) {
        _ref3 = config.libs.end;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          lib = _ref3[_k];
          result.push(this.loader.loadFile(this.basePath + '/' + lib));
        }
      }
      if (config.run) {
        run = new Array;
        _ref4 = config.run;
        for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
          module = _ref4[_l];
          if (this.modules.indexOf(module) === -1) {
            throw new Error('Module ' + module + ' was not found.');
          }
          run.push('this.require(\'' + module + '\');');
        }
        result.push(run.join('\n'));
      }
      result = result.join('\n\n');
      return result;
    };

    SimQ.prototype.getModuleName = function(path) {
      path = _path.normalize(path);
      return path.replace(new RegExp(_path.extname(path) + '$'), '');
    };

    SimQ.prototype.getConfig = function() {
      if (this.config === null) {
        if (!fs.existsSync(this.basePath + '/' + this.configPath)) {
          throw new Error('Config file setup.json was not found.');
        }
        this.config = JSON.parse(fs.readFileSync(this.basePath + '/' + this.configPath));
      }
      return this.config;
    };

    return SimQ;

  })();

  module.exports = SimQ;

}).call(this);
