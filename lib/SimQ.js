// Generated by CoffeeScript 1.6.2
(function() {
  var Config, Loader, Parser, SimQ, fs, watch, _path;

  fs = require('fs');

  watch = require('watch');

  _path = require('path');

  Loader = require('./Loader');

  Parser = require('./Parser');

  Config = require('./Config');

  SimQ = (function() {
    SimQ.prototype.basePath = '.';

    SimQ.prototype.config = null;

    SimQ.prototype.configPath = 'setup.json';

    SimQ.prototype.debug = false;

    SimQ.prototype.parser = null;

    function SimQ() {
      this.parser = new Parser(this, new Loader(this), this.basePath);
      this.config = new Config(this.basePath + '/' + this.configPath);
    }

    SimQ.prototype.build = function() {
      var config, name, pckg, _ref,
        _this = this;

      config = this.config.load();
      _ref = config.packages;
      for (name in _ref) {
        pckg = _ref[name];
        if (pckg.application) {
          fs.writeFileSync(this.basePath + '/' + pckg.application, this.parser.parseApplication(pckg));
        }
        if (pckg.style && pckg.style["in"] && pckg.style.out) {
          (function(pckg) {
            return _this.parser.parseStyles(pckg.style["in"], function(content) {
              return fs.writeFileSync(_this.basePath + '/' + pckg.style.out, content);
            });
          })(pckg);
        }
      }
      return this;
    };

    SimQ.prototype.watch = function() {
      var _this = this;

      this.build();
      watch.watchTree(this.basePath, {
        persistent: true,
        interval: 1000
      }, function(file, curr, prev) {
        if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
          return _this.build();
        }
      });
      return this;
    };

    SimQ.prototype.getModuleName = function(path) {
      path = _path.normalize(path);
      return path.replace(new RegExp(_path.extname(path) + '$'), '');
    };

    return SimQ;

  })();

  module.exports = SimQ;

}).call(this);
