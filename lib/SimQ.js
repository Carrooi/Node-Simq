// Generated by CoffeeScript 1.6.3
(function() {
  var Configurator, Package, Parser, Q, SimQ, express, fs, mime, ncp, path, watch;

  fs = require('fs');

  watch = require('watch');

  path = require('path');

  ncp = require('ncp');

  express = require('express');

  Q = require('q');

  mime = require('mime');

  Parser = require('./Parser/Parser');

  Configurator = require('./Config/Configurator');

  Package = require('./Package');

  SimQ = (function() {
    SimQ.prototype.v = false;

    SimQ.prototype.basePath = '.';

    SimQ.prototype.configPath = 'config/setup.json';

    SimQ.prototype.config = null;

    SimQ.prototype.debug = false;

    SimQ.prototype.parser = null;

    SimQ.prototype.pckg = null;

    function SimQ(configPath, basePath) {
      if (configPath == null) {
        configPath = this.configPath;
      }
      this.basePath = basePath != null ? basePath : this.basePath;
      this.basePath = path.resolve(this.basePath);
      this.configPath = path.resolve(this.basePath + '/' + configPath);
      this.pckg = new Package(this.basePath);
      this.config = new Configurator(this.configPath, this.pckg, this.basePath);
      this.parser = new Parser(this, this.pckg, this.basePath);
    }

    SimQ.prototype.server = function() {
      var app, base, config, data, main, name, pckg, route, _path, _ref, _ref1,
        _this = this;
      app = express();
      config = this.config.load();
      base = config.routes.prefix === null ? '/' : '/' + config.routes.prefix;
      main = path.resolve(this.basePath + '/' + config.routes.main);
      if (fs.existsSync(main)) {
        if (this.v) {
          console.log("Mapping file '" + main + "' to '" + base + "'");
        }
        app.get(base, function(req, res) {
          res.setHeader('Content-Type', 'text/html');
          return res.sendfile(main);
        });
      }
      _ref = config.routes.routes;
      for (route in _ref) {
        _path = _ref[route];
        route = base + route;
        _path = path.resolve(this.basePath + '/' + _path);
        data = {
          route: route,
          path: _path
        };
        if (fs.statSync(_path).isDirectory()) {
          if (this.v) {
            console.log("Mapping directory '" + _path + "' to '" + route + "'");
          }
          app.use(route, express["static"](_path));
        } else {
          (function(data) {
            if (_this.v) {
              console.log("Mapping file '" + data.path + "' to '" + data.route + "'");
            }
            return app.get(data.route, function(req, res) {
              res.setHeader('Content-Type', mime.lookup(data.path));
              return res.sendfile(data.path);
            });
          })(data);
        }
      }
      _ref1 = config.packages;
      for (name in _ref1) {
        pckg = _ref1[name];
        if (pckg.skip === false) {
          pckg.name = name;
          (function(pckg) {
            if (_this.hasPackageApplication(pckg.name)) {
              _path = base + path.relative(_this.basePath, pckg.application);
              if (_this.v) {
                console.log('Mapping file \'' + path.resolve(pckg.application) + '\' to \'' + _path + '\'');
              }
              app.get(_path, function(req, res) {
                return _this.buildApplication(pckg.name).then(function(content) {
                  res.setHeader('Content-Type', 'application/javascript');
                  return res.send(content);
                });
              });
            }
            if (_this.hasPackageStyles(pckg.name)) {
              _path = base + path.relative(_this.basePath, pckg.style.out);
              if (_this.v) {
                console.log('Mapping file \'' + path.resolve(pckg.style.out) + '\' to \'' + _path + '\'');
              }
              return app.get(_path, function(req, res) {
                return _this.buildStyles(pckg.name).then(function(content) {
                  res.setHeader('Content-Type', 'text/css');
                  return res.send(content);
                });
              });
            }
          })(pckg);
        }
      }
      app.listen(config.server.port);
      return console.log('Listening on port ' + config.server.port);
    };

    SimQ.prototype.getPackage = function(packageName) {
      var packages;
      packages = this.config.load().packages;
      if (typeof packages[packageName] === 'undefined') {
        throw new Error('Package ' + packageName + ' does not exists');
      }
      return packages[packageName];
    };

    SimQ.prototype.hasPackageStyles = function(packageName) {
      var pckg;
      pckg = this.getPackage(packageName);
      return pckg.style && pckg.style["in"] && pckg.style.out;
    };

    SimQ.prototype.hasPackageApplication = function(packageName) {
      var pckg;
      pckg = this.getPackage(packageName);
      return pckg.application !== null;
    };

    SimQ.prototype.buildStyles = function(packageName) {
      var deferred, pckg,
        _this = this;
      pckg = this.getPackage(packageName);
      deferred = Q.defer();
      if (this.v) {
        console.log("Building styles '" + packageName + "'");
      }
      this.parser.parseStyle(pckg).then(function(content) {
        return deferred.resolve(content);
      }, function(e) {
        throw e;
      }).done();
      return deferred.promise;
    };

    SimQ.prototype.buildApplication = function(packageName) {
      var deferred, pckg,
        _this = this;
      pckg = this.getPackage(packageName);
      deferred = Q.defer();
      if (this.v) {
        console.log("Building package '" + packageName + "'");
      }
      this.parser.parseApplication(pckg).then(function(content) {
        return deferred.resolve(content);
      }, function(e) {
        throw e;
      }).done();
      return deferred.promise;
    };

    SimQ.prototype.build = function() {
      var config, name, pckg, _ref,
        _this = this;
      config = this.config.load();
      _ref = config.packages;
      for (name in _ref) {
        pckg = _ref[name];
        if (pckg.skip === false) {
          pckg.name = name;
          (function(pckg) {
            if (_this.hasPackageApplication(pckg.name)) {
              _this.buildApplication(pckg.name).then(function(content) {
                return fs.writeFile(pckg.application, content);
              });
            }
            if (_this.hasPackageStyles(pckg.name)) {
              return _this.buildStyles(pckg.name).then(function(content) {
                return fs.writeFile(pckg.style.out, content);
              });
            }
          })(pckg);
        }
      }
      return this;
    };

    SimQ.prototype.watch = function() {
      var ignore, name, pckg, _ref,
        _this = this;
      this.build();
      ignore = new Array;
      _ref = this.config.load().packages;
      for (name in _ref) {
        pckg = _ref[name];
        if (pckg.application) {
          ignore.push(path.resolve(pckg.application));
        }
        if (pckg.style.out) {
          ignore.push(path.resolve(pckg.style.out));
        }
      }
      watch.watchTree(this.basePath, {}, function(file, curr, prev) {
        if (typeof file === 'string' && file.match(/~$/) === null && file.match(/^\./) === null && ignore.indexOf(path.resolve(file)) === -1) {
          if (_this.v) {
            console.log(file);
          }
          _this.config.invalidate();
          return _this.build();
        }
      });
      return this;
    };

    SimQ.create = function(name) {
      var _path;
      if (!name) {
        throw new Error('Please enter name of new application.');
      }
      _path = path.resolve(name);
      if (fs.existsSync(_path)) {
        throw new Error('Directory with ' + name + ' name is already exists.');
      }
      return ncp.ncp(path.normalize(__dirname + '/../sandbox'), _path, function(err) {
        if (err) {
          throw new Error('There is some error with creating new application.');
        }
      });
    };

    SimQ.getModuleName = function(_path) {};

    return SimQ;

  })();

  module.exports = SimQ;

}).call(this);
