// Generated by CoffeeScript 1.6.2
(function() {
  var SimQ, coffee, eco, fs, watch;

  fs = require('fs');

  coffee = require('coffee-script');

  eco = require('eco');

  watch = require('watch');

  SimQ = (function() {
    function SimQ() {}

    SimQ.prototype.basePath = '.';

    SimQ.prototype.config = null;

    SimQ.prototype.configPath = 'setup.json';

    SimQ.prototype.supported = ['js', 'coffee', 'json', 'eco'];

    SimQ.prototype.debug = false;

    SimQ.prototype.modules = [];

    SimQ.prototype.build = function() {
      fs.writeFileSync(this.basePath + '/' + this.getConfig().main, this.parse());
      return this;
    };

    SimQ.prototype.watch = function() {
      var _this = this;

      this.build();
      watch.watchTree(this.basePath, {
        persistent: true,
        interval: 1000
      }, function(file, curr, prev) {
        if (curr && (curr.nlink === 0 || +curr.mtime !== +(prev != null ? prev.mtime : void 0))) {
          return _this.build();
        }
      });
      return this;
    };

    SimQ.prototype.parse = function() {
      var alias, config, ext, extension, lib, module, modules, name, result, run, supported, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _ref4;

      result = new Array;
      config = this.getConfig();
      if (config.libs && config.libs.begin) {
        _ref = config.libs.begin;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lib = _ref[_i];
          result.push(this.loadLibrary(this.basePath + '/' + lib));
        }
      }
      if (config.modules || config.aliases) {
        modules = new Array;
        if (config.modules) {
          supported = new RegExp('\\*\\.(' + this.supported.join('|') + ')$', 'i');
          _ref1 = config.modules;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            name = _ref1[_j];
            ext = name.match(supported);
            if (ext) {
              extension = ext[1];
              name = name.replace(supported, '');
            }
            if (name.substr(name.length - 1) === '/') {
              modules = modules.concat(this.loadModules(this.basePath + '/' + name, extension));
              extension = null;
            } else {
              modules.push(this.loadModule(this.basePath + '/' + name));
            }
          }
        }
        if (config.aliases) {
          _ref2 = config.aliases;
          for (alias in _ref2) {
            module = _ref2[alias];
            if (this.modules.indexOf(module) === -1) {
              throw new Error('Module ' + module + ' was not found.');
            }
            this.modules.push(alias);
            modules.push('\'' + alias + '\': \'' + module + '\'');
          }
        }
        module = this.loadLibrary(__dirname + '/Module.js').replace(/\s+$/, '').replace(/;$/, '');
        result.push(module + '({' + modules.join(',\n') + '\n});');
      }
      if (config.libs && config.libs.end) {
        _ref3 = config.libs.end;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          lib = _ref3[_k];
          result.push(this.loadLibrary(this.basePath + '/' + lib));
        }
      }
      if (config.run) {
        run = new Array;
        _ref4 = config.run;
        for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
          module = _ref4[_l];
          if (this.modules.indexOf(module) === -1) {
            throw new Error('Module ' + module + ' was not found.');
          }
          run.push('this.require(\'' + module + '\');');
        }
        result.push(run.join('\n'));
      }
      result = result.join('\n\n');
      return result;
    };

    SimQ.prototype.loadModules = function(dir, extension) {
      var files, name, result, stats, _i, _len;

      if (extension == null) {
        extension = null;
      }
      files = fs.readdirSync(dir);
      result = new Array;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        name = files[_i];
        name = dir + name;
        stats = fs.statSync(name);
        if (stats.isFile() && name.substring(name.length - 1) !== '~') {
          if (extension) {
            if (name.substring(name.lastIndexOf('.') + 1).toLowerCase() !== extension) {
              continue;
            }
          }
          result.push(this.loadModule(name));
        } else if (stats.isDirectory()) {
          result = result.concat(this.loadModules(name + '/', extension));
        }
      }
      return result;
    };

    SimQ.prototype.loadModule = function(name) {
      var content, extension, lib, supported;

      lib = this.loadLibrary(name);
      extension = name.substring(name.lastIndexOf('.') + 1).toLowerCase();
      lib = lib.replace(/\n/g, '\n\t\t');
      lib = '\t' + lib;
      if (name.substr(0, this.basePath.length) === this.basePath) {
        name = name.substring(this.basePath.length);
      }
      supported = new RegExp('\\.(' + this.supported.join('|') + ')$', 'i');
      name = name.replace(/^(\/)?(.\/)*/, '');
      name = name.replace(supported, '');
      this.modules.push(name);
      switch (extension) {
        case 'js':
        case 'coffee':
          content = 'return ' + lib;
          break;
        case 'json':
        case 'eco':
          content = 'module.exports = ' + lib;
      }
      return '\'' + name + '\': function(exports, require, module) {\n\t\t' + content + '\n\t}';
    };

    SimQ.prototype.loadLibrary = function(path) {
      var extension, file;

      extension = path.substring(path.lastIndexOf('.') + 1).toLowerCase();
      if (this.supported.indexOf(extension) === -1) {
        return '';
      }
      file = fs.readFileSync(path).toString();
      switch (extension) {
        case 'coffee':
          file = coffee.compile(file);
          break;
        case 'eco':
          file = eco.precompile(file);
      }
      file = file.replace(/^\s+|\s+$/g, '');
      return file;
    };

    SimQ.prototype.getConfig = function() {
      if (this.config === null) {
        if (!fs.existsSync(this.basePath + '/' + this.configPath)) {
          throw new Error('Config file setup.json was not found.');
        }
        this.config = JSON.parse(fs.readFileSync(this.basePath + '/' + this.configPath));
      }
      return this.config;
    };

    return SimQ;

  })();

  module.exports = SimQ;

}).call(this);
