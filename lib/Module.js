// Generated by CoffeeScript 1.6.3
(function() {
  var cache, modules, require, resolve;

  if (!this.require) {
    modules = {};
    cache = {};
    require = function(name, parent) {
      var module,
        _this = this;
      if (parent == null) {
        parent = null;
      }
      name = resolve(name, parent);
      if (typeof modules[name] === 'undefined') {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof modules[name] === 'string') {
        name = modules[name];
      }
      if (typeof cache[name] === 'undefined') {
        module = {
          id: name,
          cached: true,
          exports: {}
        };
        modules[name].apply(modules[name], [
          module.exports, function(name, parent) {
            if (parent == null) {
              parent = null;
            }
            return _this.require(name, parent);
          }, module
        ]);
        if (module.cached === false) {
          return module.exports;
        }
        cache[name] = module;
      }
      return cache[name].exports;
    };
    resolve = function(name, parent) {
      var num, part, parts, prev, result, _i, _len;
      if (parent == null) {
        parent = null;
      }
      if (name[0] === '.' && parent !== null) {
        num = parent.lastIndexOf('/');
        num = num === -1 ? 0 : num;
        name = parent.substring(0, num) + '/' + name;
      }
      parts = name.split('/');
      result = [];
      prev = null;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (part === '.' || part === '') {
          continue;
        } else if (part === '..' && prev) {
          result.pop();
        } else {
          result.push(part);
        }
        prev = part;
      }
      return result.join('/');
    };
    this.require = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return require(name, parent);
    };
    this.require.define = function(bundle) {
      var module, name;
      for (name in bundle) {
        module = bundle[name];
        modules[name] = module;
      }
    };
  }

  return this.require.define;

}).call(this);
