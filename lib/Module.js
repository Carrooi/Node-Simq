// Generated by CoffeeScript 1.6.3
(function() {
  var cache, meta, modules, require, resolve;

  if (!this.require) {
    modules = {};
    meta = {};
    cache = {};
    require = function(name, parent) {
      var module,
        _this = this;
      if (parent == null) {
        parent = null;
      }
      name = resolve(name, parent);
      if (typeof modules[name] === 'undefined') {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof modules[name] === 'string') {
        name = resolve(modules[name]);
      }
      if (typeof cache[name] === 'undefined') {
        module = {
          exports: {},
          id: name,
          filename: name,
          loaded: false,
          parent: null,
          children: null
        };
        modules[name].apply(modules[name], [
          module.exports, function(name, parent) {
            if (parent == null) {
              parent = null;
            }
            return _this.require(name, parent);
          }, module
        ]);
        module.loaded = false;
        cache[name] = module;
      }
      return cache[name].exports;
    };
    resolve = function(name, parent) {
      var base, checkName, num, part, parts, prev, rest, result, _i, _len;
      if (parent == null) {
        parent = null;
      }
      if (name[0] === '.' && parent === null) {
        throw new Error('Can not resolve module name ' + name);
      }
      checkName = function(name) {
        if (typeof modules[name] !== 'undefined') {
          return name;
        } else if (typeof modules[name + '.js'] !== 'undefined') {
          return name + '.js';
        } else if (typeof modules[name + '.json'] !== 'undefined') {
          return name + '.json';
        } else if (typeof modules[name + '.coffee'] !== 'undefined') {
          return name + '.coffee';
        } else if (typeof modules[name + '.ts'] !== 'undefined') {
          return name + '.ts';
        } else if (typeof modules[name + '.eco'] !== 'undefined') {
          return name + '.eco';
        } else {
          return name;
        }
      };
      if (name[0] === '/') {
        name = name.replace(/^\/*/, '');
      } else if (name[0] === '.') {
        num = parent.lastIndexOf('/');
        num = num === -1 ? 0 : num;
        name = parent.substring(0, num) + '/' + name;
      }
      parts = name.split('/');
      result = [];
      prev = null;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (part === '.' || part === '') {
          continue;
        } else if (part === '..' && prev) {
          result.pop();
        } else {
          result.push(part);
        }
        prev = part;
      }
      name = result.join('/');
      name = checkName(name);
      if (typeof modules[name] === 'undefined') {
        if (typeof meta[name] !== 'undefined') {
          name = checkName(meta[name].path);
        } else {
          num = name.indexOf('/');
          base = name.substring(0, num);
          rest = name.substr(num + 1);
          if (typeof meta[base] !== 'undefined') {
            name = checkName("" + meta[base].base + "/" + rest);
          }
        }
      }
      return name;
    };
    this.require = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return require(name, parent);
    };
    this.require.define = function(bundle) {
      var module, name;
      for (name in bundle) {
        module = bundle[name];
        modules[name] = module;
      }
    };
    this.require.resolve = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return resolve(name, parent);
    };
    this.require.cache = cache;
    this.require._setMeta = function(data) {
      meta = data;
    };
  }

  return this.require.define;

}).call(this);
