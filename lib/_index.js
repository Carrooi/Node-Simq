// Generated by CoffeeScript 1.6.3
(function() {
  var Commands, Configurator, Factory, SimQ, argv, basePath, commands, configPath, configurator, optimist, path, simq, _ref;

  optimist = require('optimist');

  path = require('path');

  SimQ = require('./lib/_SimQ');

  Commands = require('./lib/Commands');

  Configurator = require('./lib/_Config/Configurator');

  Factory = require('./lib/Package/Factory');

  argv = optimist.usage(['simq COMMAND', '	creare: create and prepare new application', '	server: create server', '	build:  save all changes to disk', '	watch:  watch for new changes and save them automatically to disk', '	clean:  remove all files created by simq\n', '	--help: show this help'].join('\n')).alias('c', 'config').describe('c', 'set custom config file').alias('v', 'verbose').describe('v', 'make SimQ more talkative').argv;

  argv.command = argv._[0];

  argv.targets = argv._.slice(1);

  basePath = process.cwd();

  simq = new SimQ(basePath);

  commands = new Commands(simq);

  if ((_ref = argv.command) === 'server' || _ref === 'build' || _ref === 'watch') {
    configPath = basePath + '/' + (argv.c ? argv.c : './config/setup.json');
    configPath = path.resolve(configPath);
    configurator = new Configurator(configPath);
    commands.on('build', function(simq) {
      var config, name, pckg, _ref1, _results;
      configurator.invalidate();
      config = configurator.load();
      simq.release();
      simq.jquerify = config.template.jquerify;
      _ref1 = config.packages;
      _results = [];
      for (name in _ref1) {
        pckg = _ref1[name];
        pckg = Factory.create(basePath, pckg);
        _results.push(simq.addPackage(name, pckg));
      }
      return _results;
    });
  }

  switch (argv.command) {
    case 'create':
      commands.create(argv.targets[0]);
      break;
    case 'server':
      commands.server();
      break;
    case 'build':
      commands.build();
      break;
    case 'watch':
      commands.watch();
      break;
    default:
      optimist.showHelp();
  }

}).call(this);
