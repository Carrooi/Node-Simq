// Generated by CoffeeScript 1.6.3
(function() {
  var Compilers, coffee, eco;

  coffee = require('coffee-script');

  eco = require('eco');

  Compilers = (function() {
    Compilers.prototype.simq = null;

    function Compilers(simq) {
      this.simq = simq;
    }

    Compilers.prototype.hasLoader = function(name) {
      return typeof this[name + 'Loader'] !== 'undefined';
    };

    Compilers.prototype.prepare = function(name, content) {
      content = this.hasLoader(name) ? this[name + 'Loader'](content) : content;
      return content.replace(/^\s+|\s+$/g, '');
    };

    Compilers.prototype.hasCompiler = function(name) {
      return typeof this[name + 'Compiler'] !== 'undefined';
    };

    Compilers.prototype.compile = function(name, content) {
      if (!this.hasCompiler(name)) {
        throw new Error('File type ' + name + ' is not supported.');
      }
      return this[name + 'Compiler'](content);
    };

    Compilers.prototype.coffeeLoader = function(content) {
      return coffee.compile(content);
    };

    Compilers.prototype.ecoLoader = function(content) {
      return eco.precompile(content);
    };

    Compilers.prototype.jsCompiler = function(content) {
      return 'return ' + content;
    };

    Compilers.prototype.coffeeCompiler = function(content) {
      return 'return ' + content;
    };

    Compilers.prototype.jsonCompiler = function(content) {
      return 'module.exports = ' + content;
    };

    Compilers.prototype.ecoCompiler = function(content) {
      var module;
      module = 'module.exports = ' + content;
      if (this.simq.config.load().template.jquerify === true) {
        module = "module.exports = function (values, data) {\n	var $  = jQuery, result = $();\n	values = $.makeArray(values);\n	data = data || {};\n	for (var i=0; i < values.length; i++) {\n		var value = $.extend({}, values[i], data, {index: i});\n		var elem  = $((" + module + ")(value));\n		elem.data('item', value);\n		$.merge(result, elem);\n	}\n	return result;\n};";
      }
      return module;
    };

    return Compilers;

  })();

  module.exports = Compilers;

}).call(this);
