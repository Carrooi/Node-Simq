// Generated by CoffeeScript 1.6.3
(function() {
  var Compilers, Q, coffee, eco, less, path;

  coffee = require('coffee-script');

  eco = require('eco');

  less = require('less');

  Q = require('q');

  path = require('path');

  Compilers = (function() {
    Compilers.prototype.simq = null;

    function Compilers(simq) {
      this.simq = simq;
    }

    Compilers.prototype.hasLoader = function(ext) {
      ext = ext.toLowerCase();
      return typeof this[ext + 'Loader'] !== 'undefined';
    };

    Compilers.prototype.prepare = function(file, content) {
      var deferred, ext;
      deferred = Q.defer();
      file = path.resolve(file);
      ext = path.extname(file).substr(1).toLowerCase();
      if (this.hasLoader(ext)) {
        this[ext + 'Loader'](content, file).then(function(content) {
          return deferred.resolve(content.replace(/^\s+|\s+$/g, ''));
        });
      } else {
        deferred.resolve(content.replace(/^\s+|\s+$/g, ''));
      }
      return deferred.promise;
    };

    Compilers.prototype.hasCompiler = function(ext) {
      ext = ext.toLowerCase();
      return typeof this[ext + 'Compiler'] !== 'undefined';
    };

    Compilers.prototype.compile = function(file, content) {
      var deferred, ext;
      deferred = Q.defer();
      file = path.resolve(file);
      ext = path.extname(file).substr(1).toLowerCase();
      if (!this.hasCompiler(ext)) {
        throw new Error('File type ' + ext + ' is not supported.');
      }
      this[ext + 'Compiler'](content, file).then(function(content) {
        return deferred.resolve(content);
      });
      return deferred.promise;
    };

    Compilers.prototype.coffeeLoader = function(content) {
      return Q.resolve(coffee.compile(content));
    };

    Compilers.prototype.ecoLoader = function(content) {
      return Q.resolve(eco.precompile(content));
    };

    Compilers.prototype.lessLoader = function(content, file) {
      var deferred, e, options,
        _this = this;
      deferred = Q.defer();
      options = {
        paths: [path.dirname(file)],
        optimization: 1,
        filename: file,
        rootpath: '',
        relativeUrls: false,
        strictImports: false,
        compress: !this.simq.config.load()["debugger"].styles
      };
      try {
        less.render(content, options, function(e, content) {
          if (e) {
            throw _this.parseLessError(e, false);
          } else {
            return deferred.resolve(content);
          }
        });
      } catch (_error) {
        e = _error;
        throw this.parseLessError(e);
      }
      return deferred.promise;
    };

    Compilers.prototype.jsCompiler = function(content) {
      return Q.resolve('return (function() {\n' + content + '\n\t\t}).call(this);');
    };

    Compilers.prototype.coffeeCompiler = function(content) {
      return Q.resolve('return ' + content);
    };

    Compilers.prototype.jsonCompiler = function(content) {
      return Q.resolve('module.exports = ' + content);
    };

    Compilers.prototype.ecoCompiler = function(content) {
      var module;
      if (this.simq.config.load().template.jquerify === true) {
        module = "module.exports = function (values, data) {\n	var $  = jQuery, result = $();\n	values = $.makeArray(values);\n	data = data || {};\n	for (var i=0; i < values.length; i++) {\n		var value = $.extend({}, values[i], data, {index: i});\n		var elem  = $((" + content + ")(value));\n		elem.data('item', value);\n		$.merge(result, elem);\n	}\n	return result;\n};";
      } else {
        module = 'module.exports = ' + content;
      }
      return Q.resolve(module);
    };

    Compilers.prototype.parseLessError = function(e, transform) {
      var err;
      if (transform == null) {
        transform = true;
      }
      err = new Error(e.type + 'Error: ' + e.message.replace(/[\s\.]+$/, '') + ' in ' + e.filename + ':' + e.line + ':' + e.column);
      err.type = e.type;
      err.filename = e.filename;
      err.line = e.line;
      err.column = e.column;
      if (transform === false) {
        err.message = e.message;
      }
      return err;
    };

    return Compilers;

  })();

  module.exports = Compilers;

}).call(this);
