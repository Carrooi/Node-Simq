// Generated by CoffeeScript 1.6.3
(function() {
  var Compilers, Loader, Q, fs, _path;

  Q = require('q');

  _path = require('path');

  fs = require('fs');

  Compilers = require('./Compilers');

  Loader = (function() {
    Loader.prototype.simq = null;

    Loader.prototype.compilers = null;

    function Loader(simq) {
      this.simq = simq;
      this.compilers = new Compilers(this.simq);
    }

    Loader.prototype.loadFile = function(path) {
      var _this = this;
      return (function() {
        var deferred, ext;
        deferred = Q.defer();
        path = _path.resolve(path);
        ext = _path.extname(path).substr(1);
        fs.readFile(path, 'utf-8', function(e, data) {
          if (e) {
            return deferred.reject(new Error(e));
          } else {
            return deferred.resolve({
              ext: ext,
              content: data
            });
          }
        });
        return deferred.promise;
      })().then(function(file) {
        return Q.resolve(_this.compilers.prepare(file.ext, file.content));
      });
    };

    Loader.prototype.loadModule = function(path, base) {
      var _this = this;
      if (base == null) {
        base = null;
      }
      return (function() {
        var deferred, ext;
        deferred = Q.defer();
        path = _path.resolve(path);
        ext = _path.extname(path).substr(1);
        if (!_this.compilers.hasCompiler(ext)) {
          deferred.reject(new Error('File type' + ext + ' is not supported'));
        } else {
          _this.loadFile(path).then(function(content) {
            return deferred.resolve({
              path: path,
              ext: ext,
              content: content
            });
          });
        }
        return deferred.promise;
      })().then(function(file) {
        var module, name;
        name = _this.simq.getModuleName(file.path);
        if (base !== null) {
          name = name.replace(new RegExp('^' + base + '/'), '');
        }
        module = _this.compilers.compile(file.ext, file.content);
        module = '\'' + name + '\': function(exports, require, module) {\n\t\t' + module + '\n\t}';
        return Q.resolve(module);
      });
    };

    Loader.prototype.loadModules = function(modules, base) {
      var deferred;
      if (base == null) {
        base = null;
      }
      deferred = Q.defer();
      this.processModules([], modules, 0, base, function(result) {
        return deferred.resolve(result);
      });
      return deferred.promise;
    };

    Loader.prototype.getModulesInDir = function(dir, type) {
      var files, name, result, stats, _i, _len;
      if (type == null) {
        type = null;
      }
      dir = _path.resolve(dir);
      files = fs.readdirSync(dir);
      result = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        name = files[_i];
        name = dir + '/' + name;
        stats = fs.statSync(name);
        if (stats.isFile() && name.substring(name.length - 1) !== '~') {
          if (type) {
            if (_path.extname(name) !== '.' + type) {
              continue;
            }
          }
          result.push(name);
        } else if (stats.isDirectory()) {
          result = result.concat(this.getModulesInDir(name, type));
        }
      }
      return result;
    };

    Loader.prototype.processModules = function(result, files, num, base, finish) {
      var _this = this;
      if (base == null) {
        base = null;
      }
      if (files.length === 0 || num === files.length) {
        finish(result);
        return true;
      }
      return this.loadModule(files[num], base).then(function(content) {
        result.push(content);
        return _this.processModules(result, files, num + 1, base, finish);
      });
    };

    return Loader;

  })();

  module.exports = Loader;

}).call(this);
