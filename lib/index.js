// Generated by CoffeeScript 1.6.3
(function() {
  var Commands, Compiler, Configurator, Factory, Logger, SimQ, argv, basePath, cacheDirectory, commands, config, configPath, configurator, logger, optimist, path, promise, simq, _ref;

  optimist = require('optimist');

  path = require('path');

  Compiler = require('source-compiler');

  SimQ = require('./SimQ');

  Commands = require('./Commands');

  Configurator = require('./Config/Configurator');

  Factory = require('./Package/Factory');

  Logger = require('./Logger');

  argv = optimist.usage(['simq COMMAND', '	creare: create and prepare new application', '	server: create server', '	build:  save all changes to disk', '	watch:  watch for new changes and save them automatically to disk', '	clean:  remove all files created by simq\n', '	--help: show this help'].join('\n')).alias('c', 'config').describe('c', 'set custom config file').argv;

  argv.command = argv._[0];

  argv.targets = argv._.slice(1);

  basePath = process.cwd();

  cacheDirectory = null;

  simq = new SimQ(basePath);

  commands = new Commands(simq);

  if ((_ref = argv.command) === 'server' || _ref === 'build' || _ref === 'watch') {
    configPath = basePath + '/' + (argv.c ? argv.c : './config/setup.json');
    configPath = path.resolve(configPath);
    configurator = new Configurator(configPath);
    config = configurator.load();
    logger = new Logger(config["debugger"].log !== false ? config["debugger"].log : null);
    simq.logger = logger;
    commands.logger = logger;
    commands.on('build', function(simq) {
      var name, pckg, _ref1, _results;
      configurator.invalidate();
      config = configurator.load();
      cacheDirectory = config.cache.directory;
      if (cacheDirectory !== null) {
        cacheDirectory = path.resolve(basePath, cacheDirectory);
        Compiler.setCache(cacheDirectory);
      } else {
        Compiler.cache = null;
      }
      simq.release();
      simq.jquerify = config.template.jquerify;
      simq.minify = config["debugger"].minify;
      simq.stats = config["debugger"].filesStats;
      simq.expose = config["debugger"].expose;
      _ref1 = config.packages;
      _results = [];
      for (name in _ref1) {
        pckg = _ref1[name];
        pckg = Factory.create(basePath, pckg);
        _results.push(simq.addPackage(name, pckg));
      }
      return _results;
    });
  }

  promise = null;

  switch (argv.command) {
    case 'create':
      promise = commands.create(argv.targets[0]);
      break;
    case 'server':
      commands.server(config.routes.prefix, config.routes.main, config.routes.routes, config.server.port);
      break;
    case 'build':
      promise = commands.build();
      break;
    case 'watch':
      commands.watch();
      break;
    case 'clean':
      commands.clean(cacheDirectory);
      break;
    default:
      optimist.showHelp();
  }

  if (promise !== null) {
    promise.fail(function(err) {
      var file, line;
      file = typeof err.filename !== 'undefined' && err.filename !== null ? err.filename : null;
      line = typeof err.line !== 'undefined' && err.line !== null ? err.line : null;
      if (file !== null) {
        err.message += ' in ' + file;
      }
      if (line !== null) {
        err.message += ':' + line;
      }
      throw err;
    }).done();
  }

}).call(this);
