// Generated by CoffeeScript 1.6.3
(function() {
  var Extension, Helpers, PackageExtension, path,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Extension = require('easy-configuration/lib/Extension');

  Helpers = require('../Helpers');

  path = require('path');

  PackageExtension = (function(_super) {
    __extends(PackageExtension, _super);

    PackageExtension.prototype.basePath = '.';

    PackageExtension.prototype.defaultsPackage = {
      application: null,
      base: null,
      style: {
        "in": null,
        out: null,
        dependencies: null
      },
      modules: [],
      fsModules: {},
      aliases: {},
      run: [],
      libraries: {
        begin: [],
        end: []
      }
    };

    PackageExtension.prototype.defaultFsModule = {
      name: null,
      paths: []
    };

    function PackageExtension(basePath) {
      this.basePath = basePath;
    }

    PackageExtension.prototype.loadConfiguration = function() {
      var config, data, name, pckg, _path, _ref;
      config = this.getConfig();
      for (name in config) {
        pckg = config[name];
        config[name] = this.configurator.merge(pckg, this.defaultsPackage);
        if (pckg.base !== null) {
          pckg.base = pckg.base.replace(/^[\.\/]*/, '').replace(/[\.\/]*$/, '');
        }
        _ref = pckg.fsModules;
        for (_path in _ref) {
          data = _ref[_path];
          if (typeof data === 'string') {
            data = {
              name: data
            };
          }
          data = this.configurator.merge(data, this.defaultFsModule);
        }
      }
      return config;
    };

    PackageExtension.prototype.afterCompile = function(config) {
      var basePath, data, dep, i, name, pckg, _i, _len, _path, _ref, _ref1;
      for (name in config) {
        pckg = config[name];
        basePath = pckg.base === null ? this.basePath : this.basePath + '/' + pckg.base;
        pckg.libraries.begin = Helpers.expandFilesList(pckg.libraries.begin, basePath);
        pckg.libraries.end = Helpers.expandFilesList(pckg.libraries.end, basePath);
        pckg.modules = Helpers.expandFilesList(pckg.modules, basePath);
        _ref = pckg.fsModules;
        for (_path in _ref) {
          data = _ref[_path];
          data.paths = Helpers.expandFilesList(data.paths, _path);
        }
        if (pckg.application !== null) {
          pckg.application = path.resolve("" + basePath + "/" + pckg.application);
        }
        if (pckg.style["in"] !== null && pckg.style.out !== null) {
          pckg.style["in"] = path.resolve("" + basePath + "/" + pckg.style["in"]);
          pckg.style.out = path.resolve("" + basePath + "/" + pckg.style.out);
          if (pckg.style.dependencies !== null) {
            _ref1 = pckg.style.dependencies;
            for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
              dep = _ref1[i];
              pckg.style.dependencies[i] = path.resolve("" + basePath + "/" + dep);
            }
          }
        }
      }
      return config;
    };

    return PackageExtension;

  })(Extension);

  module.exports = PackageExtension;

}).call(this);
