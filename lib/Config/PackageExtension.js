// Generated by CoffeeScript 1.6.3
(function() {
  var Extension, Helpers, PackageExtension, path, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Extension = require('easy-configuration/lib/Extension');

  Helpers = require('../Helpers');

  path = require('path');

  PackageExtension = (function(_super) {
    __extends(PackageExtension, _super);

    function PackageExtension() {
      _ref = PackageExtension.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    PackageExtension.prototype.defaultsPackage = {
      skip: false,
      target: null,
      application: null,
      base: null,
      style: {
        "in": null,
        out: null,
        dependencies: null
      },
      modules: [],
      coreModules: null,
      fsModules: null,
      aliases: {},
      run: [],
      libraries: {
        begin: [],
        end: []
      }
    };

    PackageExtension.prototype.loadConfiguration = function() {
      var config, i, lib, name, pckg, _i, _j, _len, _len1, _ref1, _ref2;
      config = this.getConfig();
      for (name in config) {
        pckg = config[name];
        config[name] = this.configurator.merge(pckg, this.defaultsPackage);
        if (pckg.application !== null) {
          throw new Error('Config: application option is deprecated. Please use target and take a look in the new documentation.');
        }
        if (pckg.coreModules !== null) {
          throw new Error('Config: coreModules section is deprecated. Please take a look in new documentation.');
        }
        if (pckg.fsModules !== null) {
          throw new Error('Config: fsModules section is deprecated. Please take a look in new documentation.');
        }
        _ref1 = pckg.libraries.begin;
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          lib = _ref1[i];
          pckg.libraries.begin[i] = '- ' + lib;
        }
        _ref2 = pckg.libraries.end;
        for (i = _j = 0, _len1 = _ref2.length; _j < _len1; i = ++_j) {
          lib = _ref2[i];
          pckg.libraries.end[i] = '- ' + lib;
        }
        pckg.run.unshift.apply(pckg.run, pckg.libraries.begin);
        pckg.run.push.apply(pckg.run, pckg.libraries.end);
        if (pckg.style["in"] === null || pckg.style.out === null) {
          pckg.style = null;
        }
        delete pckg.coreModules;
        delete pckg.fsModules;
        delete pckg.libraries;
      }
      return config;
    };

    return PackageExtension;

  })(Extension);

  module.exports = PackageExtension;

}).call(this);
