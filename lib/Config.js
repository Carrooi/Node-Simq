// Generated by CoffeeScript 1.6.2
(function() {
  var Config, fs, _path;

  fs = require('fs');

  _path = require('path');

  Config = (function() {
    Config.prototype.path = '';

    Config.prototype.data = null;

    Config.prototype.includable = ['modules', 'aliases', 'run', 'libs'];

    Config.prototype.defaults = {
      packages: {}
    };

    Config.prototype.defaultsPackage = {
      include: null,
      application: null,
      style: {
        "in": null,
        out: null
      },
      modules: [],
      aliases: {},
      run: [],
      libs: {
        begin: {},
        end: {}
      }
    };

    function Config(path) {
      this.path = path;
    }

    Config.prototype.load = function() {
      if (this.data === null) {
        this.data = this.loadConfig(this.path);
      }
      return this.data;
    };

    Config.prototype.loadConfig = function(path, included) {
      var config, data, name, pckg, _ref;

      if (included == null) {
        included = false;
      }
      path = _path.resolve(path);
      if (!fs.existsSync(path)) {
        throw new Error('Config file ' + path + ' was not found.');
      }
      data = JSON.parse(fs.readFileSync(path));
      if (included) {
        data = this.parseSection(data, true);
      } else {
        if (!data.packages) {
          config = {
            packages: {
              __main__: data
            }
          };
          data = config;
        }
        _ref = data.packages;
        for (name in _ref) {
          pckg = _ref[name];
          data.packages[name] = this.parseSection(pckg);
        }
      }
      return data;
    };

    Config.prototype.parseSection = function(section, included) {
      var data, key, value;

      if (included == null) {
        included = false;
      }
      if (section.main) {
        section.application = section.main;
        delete section.main;
      }
      if (!included && section.include) {
        data = this.loadConfig(section.include, true);
        for (key in data) {
          value = data[key];
          if (this.includable.indexOf(key) === -1) {
            throw new Error('Cannot include ' + key + ' section');
          }
          if (section[key]) {
            section[key] = this.merge(key, section[key], value);
          } else {
            section[key] = value;
          }
        }
      }
      return section;
    };

    Config.prototype.merge = function(key, data, defaults) {
      var type, value, _type;

      _type = Object.prototype.toString;
      type = _type.call(data);
      if (type !== _type.call(defaults)) {
        throw new Error('Cannot include ' + key + ' section. Source and target sections are not the same type.');
      }
      if (type === '[object Array]') {
        data = defaults.concat(data);
      } else if (type === '[object Object]') {
        for (key in defaults) {
          value = defaults[key];
          type = _type.call(value);
          if (type === '[object String]' && !data[key]) {
            data[key] = value;
          } else if (type === '[object Array]') {
            data[key] = data[key] ? value.concat(data[key]) : value;
          }
        }
      }
      return data;
    };

    return Config;

  })();

  module.exports = Config;

}).call(this);
