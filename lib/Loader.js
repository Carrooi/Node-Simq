// Generated by CoffeeScript 1.6.3
(function() {
  var Loader, coffee, eco, fs, _path;

  _path = require('path');

  fs = require('fs');

  coffee = require('coffee-script');

  eco = require('eco');

  Loader = (function() {
    Loader.prototype.simq = null;

    function Loader(simq) {
      this.simq = simq;
    }

    Loader.prototype.loadFile = function(path) {
      var e, ext, file;
      path = _path.resolve(path);
      ext = _path.extname(path).substring(1).toLowerCase();
      if (typeof this.loaders[ext] === 'undefined') {
        throw new Error('File .' + ext + ' is not supported');
      }
      file = fs.readFileSync(path, 'utf8').toString();
      try {
        file = this.loaders[ext](file);
      } catch (_error) {
        e = _error;
        throw new Error(e.toString() + ' in ' + path);
      }
      file = this.normalize(file);
      return file;
    };

    Loader.prototype.loadModule = function(path, base) {
      var ext, lib, name;
      if (base == null) {
        base = null;
      }
      path = _path.normalize(path);
      ext = _path.extname(path).substring(1).toLowerCase();
      if (typeof this.compilers[ext] === 'undefined') {
        throw new Error('Module of type ' + ext + ' is not supported');
      }
      lib = this.loadFile(path).replace(/\n/g, '\n\t\t');
      name = this.simq.getModuleName(path);
      if (base !== null) {
        name = name.replace(new RegExp('^' + base + '/'), '');
      }
      lib = this.compilers[ext](lib);
      if (ext === 'eco' && this.simq.config.load().template.jquerify === true) {
        lib = "module.exports = function (values, data) {\n	var $  = jQuery, result = $();\n	values = $.makeArray(values);\n	data = data || {};\n	for (var i=0; i < values.length; i++) {\n		var value = $.extend({}, values[i], data, {index: i});\n		var elem  = $((" + lib + ")(value));\n		elem.data('item', value);\n		$.merge(result, elem);\n	}\n	return result;\n};";
      }
      return '\'' + name + '\': function(exports, require, module) {\n\t\t' + lib + '\n\t}';
    };

    Loader.prototype.loadModules = function(dir, type, base) {
      var files, name, result, stats, _i, _len;
      if (type == null) {
        type = null;
      }
      if (base == null) {
        base = null;
      }
      dir = _path.normalize(dir);
      files = fs.readdirSync(dir);
      result = new Array;
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        name = files[_i];
        name = dir + name;
        stats = fs.statSync(name);
        if (stats.isFile() && name.substring(name.length - 1) !== '~') {
          if (type) {
            if (_path.extname(name).toLowerCase() !== '.' + type) {
              continue;
            }
          }
          result.push(this.loadModule(name, base));
        } else if (stats.isDirectory()) {
          result = result.concat(this.loadModules(name + '/', type, base));
        }
      }
      return result;
    };

    Loader.prototype.normalize = function(content) {
      content = content.replace(/^\s+|\s+$/g, '');
      return content;
    };

    Loader.prototype.loaders = {
      js: function(content) {
        return content;
      },
      coffee: function(content) {
        return coffee.compile(content);
      },
      json: function(content) {
        return content;
      },
      eco: function(content) {
        return eco.precompile(content);
      }
    };

    Loader.prototype.compilers = {
      js: function(content) {
        return 'return ' + content;
      },
      coffee: function(content) {
        return 'return ' + content;
      },
      json: function(content) {
        return 'module.exports = ' + content;
      },
      eco: function(content) {
        return 'module.exports = ' + content;
      }
    };

    return Loader;

  })();

  module.exports = Loader;

}).call(this);
