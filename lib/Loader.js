// Generated by CoffeeScript 1.6.3
(function() {
  var Compiler, Loader, Q, path,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Q = require('q');

  path = require('path');

  Compiler = require('source-compiler');

  Loader = (function() {
    function Loader() {}

    Loader.prototype.minify = {
      styles: true,
      scripts: true
    };

    Loader.prototype.jquerify = false;

    Loader.prototype.types = {
      less: 'style',
      scss: 'style',
      styl: 'style',
      js: 'script',
      json: 'script',
      coffee: 'script',
      ts: 'script',
      eco: 'script'
    };

    Loader.prototype.modulesAllowed = ['js', 'json', 'coffee', 'ts', 'eco'];

    Loader.prototype.loadFile = function(_path, dependents) {
      var options;
      if (dependents == null) {
        dependents = null;
      }
      options = {
        precompile: true,
        minify: this.minify[Compiler.getType(_path) + 's'],
        jquerify: this.jquerify
      };
      if (dependents !== null) {
        options.dependents = dependents;
      }
      return Compiler.compileFile(_path, options);
    };

    Loader.prototype.loadModule = function(_path, base) {
      var deferred, _ref,
        _this = this;
      if (base == null) {
        base = null;
      }
      if (_ref = Compiler.getType(_path), __indexOf.call(this.modulesAllowed, _ref) < 0) {
        return Q.reject(new Error("File " + _path + " is not module"));
      }
      if (_path.match(/^http/) !== null) {
        return Q.reject(new Error("Remote file " + _path + " can not be used as module"));
      }
      _path = path.resolve(_path);
      deferred = Q.defer();
      this.loadFile(_path).then(function(data) {
        var globals, name;
        name = _path.replace(new RegExp('^' + process.cwd() + '\/'), '');
        if (base !== null) {
          name = name.replace(new RegExp('^' + base + '/'), '');
        }
        globals = Loader.getGlobalsForModule(name).join('\n');
        return deferred.resolve("'" + name + "': function(exports, __require, module) {\n" + globals + "\n" + data + "\n}");
      }, function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    Loader.getGlobalsForModule = function(name) {
      var globals, key, result, value;
      globals = {
        require: "function(name) {return __require(name, '" + name + "');}",
        __filename: "'" + name + "'",
        __dirname: '\'' + path.dirname(name) + '\''
      };
      result = [];
      for (key in globals) {
        value = globals[key];
        result.push("var " + key + " = " + value + ";");
      }
      return result;
    };

    return Loader;

  })();

  module.exports = Loader;

}).call(this);
