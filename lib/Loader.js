// Generated by CoffeeScript 1.6.3
(function() {
  var Compiler, Loader, Package, Q, path,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Q = require('q');

  path = require('path');

  Compiler = require('source-compiler');

  Package = require('./Package');

  Loader = (function() {
    function Loader() {}

    Loader.prototype.jquerify = false;

    Loader.prototype.modulesAllowed = ['js', 'json', 'coffee', 'ts', 'eco'];

    Loader.prototype.autoModule = ['json', 'eco'];

    Loader.prototype.loadFile = function(_path, dependents) {
      var options;
      if (dependents == null) {
        dependents = null;
      }
      options = {
        precompile: true,
        jquerify: this.jquerify
      };
      if (dependents !== null) {
        options.dependents = dependents;
      }
      return Compiler.compileFile(_path, options);
    };

    Loader.prototype.loadFiles = function(paths) {
      var result, _i, _len, _path;
      result = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        _path = paths[_i];
        result.push(this.loadFile(_path));
      }
      return Q.all(result);
    };

    Loader.prototype.loadModule = function(_path, base, name) {
      var deferred, type,
        _this = this;
      if (base == null) {
        base = null;
      }
      if (name == null) {
        name = null;
      }
      type = Compiler.getType(_path);
      if (__indexOf.call(this.modulesAllowed, type) < 0) {
        return Q.reject(new Error("File " + _path + " is not module"));
      }
      if (_path.match(/^http/) !== null) {
        return Q.reject(new Error("Remote file " + _path + " can not be used as module"));
      }
      _path = path.resolve(_path);
      deferred = Q.defer();
      this.loadFile(_path).then(function(data) {
        var globals;
        if (name === null) {
          name = _path.replace(new RegExp('^' + process.cwd() + '\/'), '');
          if (base !== null) {
            name = name.replace(new RegExp('^' + base + '/'), '');
          }
        } else {

        }
        globals = Package.getGlobalsForModule(name).join('\n');
        if (__indexOf.call(_this.autoModule, type) >= 0) {
          data = "module.exports = " + data;
        }
        return deferred.resolve("'" + name + "': function(exports, __require, module) {\n" + globals + "\n" + data + "\n}");
      }, function(err) {
        return deferred.reject(err);
      });
      return deferred.promise;
    };

    Loader.prototype.loadModules = function(paths, base) {
      var name, result, _i, _len, _path;
      if (base == null) {
        base = null;
      }
      result = [];
      switch (Object.prototype.toString.call(paths)) {
        case '[object Array]':
          for (_i = 0, _len = paths.length; _i < _len; _i++) {
            _path = paths[_i];
            result.push(this.loadModule(_path, base));
          }
          break;
        case '[object Object]':
          for (name in paths) {
            _path = paths[name];
            result.push(this.loadModule(_path, base, name));
          }
      }
      return Q.all(result);
    };

    return Loader;

  })();

  module.exports = Loader;

}).call(this);
